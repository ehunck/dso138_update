
DSO138_upgrade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007330  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d4  080074d4  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080074d4  080074d4  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074d4  080074d4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074d4  080074d4  000174d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080074dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020cc  20000180  0800765c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000224c  0800765c  0002224c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b7b  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000474f  00000000  00000000  00041d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001500  00000000  00000000  00046478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001328  00000000  00000000  00047978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a814  00000000  00000000  00048ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014899  00000000  00000000  000634b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080b43  00000000  00000000  00077d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8890  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000559c  00000000  00000000  000f890c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08007428 	.word	0x08007428

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08007428 	.word	0x08007428

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 fb29 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	200f      	movs	r0, #15
 8000168:	f000 f808 	bl	800017c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f006 fb1e 	bl	80067ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x54>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <HAL_InitTick+0x58>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	4619      	mov	r1, r3
 800018e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000192:	fbb3 f3f1 	udiv	r3, r3, r1
 8000196:	fbb2 f3f3 	udiv	r3, r2, r3
 800019a:	4618      	mov	r0, r3
 800019c:	f000 fb41 	bl	8000822 <HAL_SYSTICK_Config>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e00e      	b.n	80001c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b0f      	cmp	r3, #15
 80001ae:	d80a      	bhi.n	80001c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001b0:	2200      	movs	r2, #0
 80001b2:	6879      	ldr	r1, [r7, #4]
 80001b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b8:	f000 fb09 	bl	80007ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001bc:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <HAL_InitTick+0x5c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001c2:	2300      	movs	r3, #0
 80001c4:	e000      	b.n	80001c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c6:	2301      	movs	r3, #1
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	2000011c 	.word	0x2000011c
 80001d4:	20000004 	.word	0x20000004
 80001d8:	20000000 	.word	0x20000000

080001dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x1c>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <HAL_IncTick+0x20>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4413      	add	r3, r2
 80001ec:	4a03      	ldr	r2, [pc, #12]	; (80001fc <HAL_IncTick+0x20>)
 80001ee:	6013      	str	r3, [r2, #0]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	20000004 	.word	0x20000004
 80001fc:	2000110c 	.word	0x2000110c

08000200 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  return uwTick;
 8000204:	4b02      	ldr	r3, [pc, #8]	; (8000210 <HAL_GetTick+0x10>)
 8000206:	681b      	ldr	r3, [r3, #0]
}
 8000208:	4618      	mov	r0, r3
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	2000110c 	.word	0x2000110c

08000214 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800021c:	2300      	movs	r3, #0
 800021e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000220:	2300      	movs	r3, #0
 8000222:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d101      	bne.n	8000236 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000232:	2301      	movs	r3, #1
 8000234:	e0be      	b.n	80003b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000240:	2b00      	cmp	r3, #0
 8000242:	d109      	bne.n	8000258 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2200      	movs	r2, #0
 8000248:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2200      	movs	r2, #0
 800024e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f006 fae2 	bl	800681c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f000 f9ab 	bl	80005b4 <ADC_ConversionStop_Disable>
 800025e:	4603      	mov	r3, r0
 8000260:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000266:	f003 0310 	and.w	r3, r3, #16
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8099 	bne.w	80003a2 <HAL_ADC_Init+0x18e>
 8000270:	7dfb      	ldrb	r3, [r7, #23]
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8095 	bne.w	80003a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800027c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000280:	f023 0302 	bic.w	r3, r3, #2
 8000284:	f043 0202 	orr.w	r2, r3, #2
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000294:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800029c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	4313      	orrs	r3, r2
 80002a2:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ac:	d003      	beq.n	80002b6 <HAL_ADC_Init+0xa2>
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d102      	bne.n	80002bc <HAL_ADC_Init+0xa8>
 80002b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ba:	e000      	b.n	80002be <HAL_ADC_Init+0xaa>
 80002bc:	2300      	movs	r3, #0
 80002be:	693a      	ldr	r2, [r7, #16]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d119      	bne.n	8000300 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d109      	bne.n	80002e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	3b01      	subs	r3, #1
 80002da:	035a      	lsls	r2, r3, #13
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	4313      	orrs	r3, r2
 80002e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	e00b      	b.n	8000300 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	f043 0220 	orr.w	r2, r3, #32
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f8:	f043 0201 	orr.w	r2, r3, #1
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	693a      	ldr	r2, [r7, #16]
 8000310:	430a      	orrs	r2, r1
 8000312:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	4b28      	ldr	r3, [pc, #160]	; (80003bc <HAL_ADC_Init+0x1a8>)
 800031c:	4013      	ands	r3, r2
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	68b9      	ldr	r1, [r7, #8]
 8000324:	430b      	orrs	r3, r1
 8000326:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000330:	d003      	beq.n	800033a <HAL_ADC_Init+0x126>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d104      	bne.n	8000344 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	691b      	ldr	r3, [r3, #16]
 800033e:	3b01      	subs	r3, #1
 8000340:	051b      	lsls	r3, r3, #20
 8000342:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	430a      	orrs	r2, r1
 8000356:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <HAL_ADC_Init+0x1ac>)
 8000360:	4013      	ands	r3, r2
 8000362:	68ba      	ldr	r2, [r7, #8]
 8000364:	429a      	cmp	r2, r3
 8000366:	d10b      	bne.n	8000380 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000372:	f023 0303 	bic.w	r3, r3, #3
 8000376:	f043 0201 	orr.w	r2, r3, #1
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800037e:	e018      	b.n	80003b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000384:	f023 0312 	bic.w	r3, r3, #18
 8000388:	f043 0210 	orr.w	r2, r3, #16
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000394:	f043 0201 	orr.w	r2, r3, #1
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800039c:	2301      	movs	r3, #1
 800039e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003a0:	e007      	b.n	80003b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a6:	f043 0210 	orr.w	r2, r3, #16
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003ae:	2301      	movs	r3, #1
 80003b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3718      	adds	r7, #24
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	ffe1f7fd 	.word	0xffe1f7fd
 80003c0:	ff1f0efe 	.word	0xff1f0efe

080003c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003ce:	2300      	movs	r3, #0
 80003d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d101      	bne.n	80003e4 <HAL_ADC_ConfigChannel+0x20>
 80003e0:	2302      	movs	r3, #2
 80003e2:	e0dc      	b.n	800059e <HAL_ADC_ConfigChannel+0x1da>
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2201      	movs	r2, #1
 80003e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	2b06      	cmp	r3, #6
 80003f2:	d81c      	bhi.n	800042e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	685a      	ldr	r2, [r3, #4]
 80003fe:	4613      	mov	r3, r2
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	4413      	add	r3, r2
 8000404:	3b05      	subs	r3, #5
 8000406:	221f      	movs	r2, #31
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	4019      	ands	r1, r3
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	6818      	ldr	r0, [r3, #0]
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	685a      	ldr	r2, [r3, #4]
 8000418:	4613      	mov	r3, r2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	4413      	add	r3, r2
 800041e:	3b05      	subs	r3, #5
 8000420:	fa00 f203 	lsl.w	r2, r0, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	430a      	orrs	r2, r1
 800042a:	635a      	str	r2, [r3, #52]	; 0x34
 800042c:	e03c      	b.n	80004a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	2b0c      	cmp	r3, #12
 8000434:	d81c      	bhi.n	8000470 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	685a      	ldr	r2, [r3, #4]
 8000440:	4613      	mov	r3, r2
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	4413      	add	r3, r2
 8000446:	3b23      	subs	r3, #35	; 0x23
 8000448:	221f      	movs	r2, #31
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	4019      	ands	r1, r3
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	6818      	ldr	r0, [r3, #0]
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	4613      	mov	r3, r2
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4413      	add	r3, r2
 8000460:	3b23      	subs	r3, #35	; 0x23
 8000462:	fa00 f203 	lsl.w	r2, r0, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	430a      	orrs	r2, r1
 800046c:	631a      	str	r2, [r3, #48]	; 0x30
 800046e:	e01b      	b.n	80004a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	685a      	ldr	r2, [r3, #4]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3b41      	subs	r3, #65	; 0x41
 8000482:	221f      	movs	r2, #31
 8000484:	fa02 f303 	lsl.w	r3, r2, r3
 8000488:	43db      	mvns	r3, r3
 800048a:	4019      	ands	r1, r3
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	6818      	ldr	r0, [r3, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	4613      	mov	r3, r2
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4413      	add	r3, r2
 800049a:	3b41      	subs	r3, #65	; 0x41
 800049c:	fa00 f203 	lsl.w	r2, r0, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	430a      	orrs	r2, r1
 80004a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b09      	cmp	r3, #9
 80004ae:	d91c      	bls.n	80004ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	68d9      	ldr	r1, [r3, #12]
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	4613      	mov	r3, r2
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	4413      	add	r3, r2
 80004c0:	3b1e      	subs	r3, #30
 80004c2:	2207      	movs	r2, #7
 80004c4:	fa02 f303 	lsl.w	r3, r2, r3
 80004c8:	43db      	mvns	r3, r3
 80004ca:	4019      	ands	r1, r3
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	6898      	ldr	r0, [r3, #8]
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4613      	mov	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4413      	add	r3, r2
 80004da:	3b1e      	subs	r3, #30
 80004dc:	fa00 f203 	lsl.w	r2, r0, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	e019      	b.n	800051e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	6919      	ldr	r1, [r3, #16]
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4613      	mov	r3, r2
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	4413      	add	r3, r2
 80004fa:	2207      	movs	r2, #7
 80004fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	4019      	ands	r1, r3
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	6898      	ldr	r0, [r3, #8]
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4613      	mov	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4413      	add	r3, r2
 8000512:	fa00 f203 	lsl.w	r2, r0, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	430a      	orrs	r2, r1
 800051c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b10      	cmp	r3, #16
 8000524:	d003      	beq.n	800052e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800052a:	2b11      	cmp	r3, #17
 800052c:	d132      	bne.n	8000594 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d125      	bne.n	8000584 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000542:	2b00      	cmp	r3, #0
 8000544:	d126      	bne.n	8000594 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	689a      	ldr	r2, [r3, #8]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000554:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b10      	cmp	r3, #16
 800055c:	d11a      	bne.n	8000594 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <HAL_ADC_ConfigChannel+0x1e8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000564:	fba2 2303 	umull	r2, r3, r2, r3
 8000568:	0c9a      	lsrs	r2, r3, #18
 800056a:	4613      	mov	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000574:	e002      	b.n	800057c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	3b01      	subs	r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f9      	bne.n	8000576 <HAL_ADC_ConfigChannel+0x1b2>
 8000582:	e007      	b.n	8000594 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000588:	f043 0220 	orr.w	r2, r3, #32
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2200      	movs	r2, #0
 8000598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	40012400 	.word	0x40012400
 80005ac:	2000011c 	.word	0x2000011c
 80005b0:	431bde83 	.word	0x431bde83

080005b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d127      	bne.n	800061e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	689a      	ldr	r2, [r3, #8]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f022 0201 	bic.w	r2, r2, #1
 80005dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80005de:	f7ff fe0f 	bl	8000200 <HAL_GetTick>
 80005e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80005e4:	e014      	b.n	8000610 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80005e6:	f7ff fe0b 	bl	8000200 <HAL_GetTick>
 80005ea:	4602      	mov	r2, r0
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d90d      	bls.n	8000610 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f8:	f043 0210 	orr.w	r2, r3, #16
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000604:	f043 0201 	orr.w	r2, r3, #1
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800060c:	2301      	movs	r3, #1
 800060e:	e007      	b.n	8000620 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b01      	cmp	r3, #1
 800061c:	d0e3      	beq.n	80005e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <NVIC_SetPriorityGrouping+0x44>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <NVIC_SetPriorityGrouping+0x44>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <NVIC_GetPriorityGrouping+0x18>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f003 021f 	and.w	r2, r3, #31
 800069c:	4906      	ldr	r1, [pc, #24]	; (80006b8 <NVIC_EnableIRQ+0x2c>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	095b      	lsrs	r3, r3, #5
 80006a4:	2001      	movs	r0, #1
 80006a6:	fa00 f202 	lsl.w	r2, r0, r2
 80006aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100

080006bc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	da0b      	bge.n	80006e8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	490c      	ldr	r1, [pc, #48]	; (8000708 <NVIC_SetPriority+0x4c>)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 030f 	and.w	r3, r3, #15
 80006dc:	3b04      	subs	r3, #4
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	440b      	add	r3, r1
 80006e4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e6:	e009      	b.n	80006fc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <NVIC_SetPriority+0x50>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	0112      	lsls	r2, r2, #4
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	e000e100 	.word	0xe000e100

08000710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000710:	b480      	push	{r7}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	f1c3 0307 	rsb	r3, r3, #7
 800072a:	2b04      	cmp	r3, #4
 800072c:	bf28      	it	cs
 800072e:	2304      	movcs	r3, #4
 8000730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3304      	adds	r3, #4
 8000736:	2b06      	cmp	r3, #6
 8000738:	d902      	bls.n	8000740 <NVIC_EncodePriority+0x30>
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3b03      	subs	r3, #3
 800073e:	e000      	b.n	8000742 <NVIC_EncodePriority+0x32>
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	43da      	mvns	r2, r3
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	401a      	ands	r2, r3
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000758:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	43d9      	mvns	r1, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	4313      	orrs	r3, r2
         );
}
 800076a:	4618      	mov	r0, r3
 800076c:	3724      	adds	r7, #36	; 0x24
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	210f      	movs	r1, #15
 8000794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000798:	f7ff ff90 	bl	80006bc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff31 	bl	8000628 <NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff46 	bl	8000670 <NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff90 	bl	8000710 <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5f 	bl	80006bc <NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff39 	bl	800068c <NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffa2 	bl	8000774 <SysTick_Config>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e043      	b.n	80008da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <HAL_DMA_Init+0xa8>)
 800085a:	4413      	add	r3, r2
 800085c:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <HAL_DMA_Init+0xac>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	091b      	lsrs	r3, r3, #4
 8000864:	009a      	lsls	r2, r3, #2
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <HAL_DMA_Init+0xb0>)
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2202      	movs	r2, #2
 8000874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000886:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800088a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2201      	movs	r2, #1
 80008cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	bffdfff8 	.word	0xbffdfff8
 80008e8:	cccccccd 	.word	0xcccccccd
 80008ec:	40020000 	.word	0x40020000

080008f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	2204      	movs	r2, #4
 800090e:	409a      	lsls	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4013      	ands	r3, r2
 8000914:	2b00      	cmp	r3, #0
 8000916:	d04f      	beq.n	80009b8 <HAL_DMA_IRQHandler+0xc8>
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	2b00      	cmp	r3, #0
 8000920:	d04a      	beq.n	80009b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	2b00      	cmp	r3, #0
 800092e:	d107      	bne.n	8000940 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f022 0204 	bic.w	r2, r2, #4
 800093e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a66      	ldr	r2, [pc, #408]	; (8000ae0 <HAL_DMA_IRQHandler+0x1f0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d029      	beq.n	800099e <HAL_DMA_IRQHandler+0xae>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <HAL_DMA_IRQHandler+0x1f4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d022      	beq.n	800099a <HAL_DMA_IRQHandler+0xaa>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a63      	ldr	r2, [pc, #396]	; (8000ae8 <HAL_DMA_IRQHandler+0x1f8>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d01a      	beq.n	8000994 <HAL_DMA_IRQHandler+0xa4>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a62      	ldr	r2, [pc, #392]	; (8000aec <HAL_DMA_IRQHandler+0x1fc>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d012      	beq.n	800098e <HAL_DMA_IRQHandler+0x9e>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a60      	ldr	r2, [pc, #384]	; (8000af0 <HAL_DMA_IRQHandler+0x200>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d00a      	beq.n	8000988 <HAL_DMA_IRQHandler+0x98>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a5f      	ldr	r2, [pc, #380]	; (8000af4 <HAL_DMA_IRQHandler+0x204>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d102      	bne.n	8000982 <HAL_DMA_IRQHandler+0x92>
 800097c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000980:	e00e      	b.n	80009a0 <HAL_DMA_IRQHandler+0xb0>
 8000982:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000986:	e00b      	b.n	80009a0 <HAL_DMA_IRQHandler+0xb0>
 8000988:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800098c:	e008      	b.n	80009a0 <HAL_DMA_IRQHandler+0xb0>
 800098e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000992:	e005      	b.n	80009a0 <HAL_DMA_IRQHandler+0xb0>
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	e002      	b.n	80009a0 <HAL_DMA_IRQHandler+0xb0>
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	e000      	b.n	80009a0 <HAL_DMA_IRQHandler+0xb0>
 800099e:	2304      	movs	r3, #4
 80009a0:	4a55      	ldr	r2, [pc, #340]	; (8000af8 <HAL_DMA_IRQHandler+0x208>)
 80009a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 8094 	beq.w	8000ad6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80009b6:	e08e      	b.n	8000ad6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	2202      	movs	r2, #2
 80009be:	409a      	lsls	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4013      	ands	r3, r2
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d056      	beq.n	8000a76 <HAL_DMA_IRQHandler+0x186>
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d051      	beq.n	8000a76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 0320 	and.w	r3, r3, #32
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10b      	bne.n	80009f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 020a 	bic.w	r2, r2, #10
 80009ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2201      	movs	r2, #1
 80009f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a38      	ldr	r2, [pc, #224]	; (8000ae0 <HAL_DMA_IRQHandler+0x1f0>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d029      	beq.n	8000a56 <HAL_DMA_IRQHandler+0x166>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a37      	ldr	r2, [pc, #220]	; (8000ae4 <HAL_DMA_IRQHandler+0x1f4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d022      	beq.n	8000a52 <HAL_DMA_IRQHandler+0x162>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a35      	ldr	r2, [pc, #212]	; (8000ae8 <HAL_DMA_IRQHandler+0x1f8>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d01a      	beq.n	8000a4c <HAL_DMA_IRQHandler+0x15c>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a34      	ldr	r2, [pc, #208]	; (8000aec <HAL_DMA_IRQHandler+0x1fc>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d012      	beq.n	8000a46 <HAL_DMA_IRQHandler+0x156>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a32      	ldr	r2, [pc, #200]	; (8000af0 <HAL_DMA_IRQHandler+0x200>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d00a      	beq.n	8000a40 <HAL_DMA_IRQHandler+0x150>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <HAL_DMA_IRQHandler+0x204>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d102      	bne.n	8000a3a <HAL_DMA_IRQHandler+0x14a>
 8000a34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a38:	e00e      	b.n	8000a58 <HAL_DMA_IRQHandler+0x168>
 8000a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a3e:	e00b      	b.n	8000a58 <HAL_DMA_IRQHandler+0x168>
 8000a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a44:	e008      	b.n	8000a58 <HAL_DMA_IRQHandler+0x168>
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4a:	e005      	b.n	8000a58 <HAL_DMA_IRQHandler+0x168>
 8000a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a50:	e002      	b.n	8000a58 <HAL_DMA_IRQHandler+0x168>
 8000a52:	2320      	movs	r3, #32
 8000a54:	e000      	b.n	8000a58 <HAL_DMA_IRQHandler+0x168>
 8000a56:	2302      	movs	r3, #2
 8000a58:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <HAL_DMA_IRQHandler+0x208>)
 8000a5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d034      	beq.n	8000ad6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000a74:	e02f      	b.n	8000ad6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	409a      	lsls	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4013      	ands	r3, r2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d028      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x1e8>
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d023      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f022 020e 	bic.w	r2, r2, #14
 8000a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000aae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	4798      	blx	r3
    }
  }
  return;
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
}
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40020008 	.word	0x40020008
 8000ae4:	4002001c 	.word	0x4002001c
 8000ae8:	40020030 	.word	0x40020030
 8000aec:	40020044 	.word	0x40020044
 8000af0:	40020058 	.word	0x40020058
 8000af4:	4002006c 	.word	0x4002006c
 8000af8:	40020000 	.word	0x40020000

08000afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b08b      	sub	sp, #44	; 0x2c
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1e:	e127      	b.n	8000d70 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000b20:	2201      	movs	r2, #1
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f040 8116 	bne.w	8000d6a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b12      	cmp	r3, #18
 8000b44:	d034      	beq.n	8000bb0 <HAL_GPIO_Init+0xb4>
 8000b46:	2b12      	cmp	r3, #18
 8000b48:	d80d      	bhi.n	8000b66 <HAL_GPIO_Init+0x6a>
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d02b      	beq.n	8000ba6 <HAL_GPIO_Init+0xaa>
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d804      	bhi.n	8000b5c <HAL_GPIO_Init+0x60>
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d031      	beq.n	8000bba <HAL_GPIO_Init+0xbe>
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d01c      	beq.n	8000b94 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5a:	e048      	b.n	8000bee <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d043      	beq.n	8000be8 <HAL_GPIO_Init+0xec>
 8000b60:	2b11      	cmp	r3, #17
 8000b62:	d01b      	beq.n	8000b9c <HAL_GPIO_Init+0xa0>
          break;
 8000b64:	e043      	b.n	8000bee <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000b66:	4a87      	ldr	r2, [pc, #540]	; (8000d84 <HAL_GPIO_Init+0x288>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d026      	beq.n	8000bba <HAL_GPIO_Init+0xbe>
 8000b6c:	4a85      	ldr	r2, [pc, #532]	; (8000d84 <HAL_GPIO_Init+0x288>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d806      	bhi.n	8000b80 <HAL_GPIO_Init+0x84>
 8000b72:	4a85      	ldr	r2, [pc, #532]	; (8000d88 <HAL_GPIO_Init+0x28c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d020      	beq.n	8000bba <HAL_GPIO_Init+0xbe>
 8000b78:	4a84      	ldr	r2, [pc, #528]	; (8000d8c <HAL_GPIO_Init+0x290>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d01d      	beq.n	8000bba <HAL_GPIO_Init+0xbe>
          break;
 8000b7e:	e036      	b.n	8000bee <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000b80:	4a83      	ldr	r2, [pc, #524]	; (8000d90 <HAL_GPIO_Init+0x294>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d019      	beq.n	8000bba <HAL_GPIO_Init+0xbe>
 8000b86:	4a83      	ldr	r2, [pc, #524]	; (8000d94 <HAL_GPIO_Init+0x298>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d016      	beq.n	8000bba <HAL_GPIO_Init+0xbe>
 8000b8c:	4a82      	ldr	r2, [pc, #520]	; (8000d98 <HAL_GPIO_Init+0x29c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d013      	beq.n	8000bba <HAL_GPIO_Init+0xbe>
          break;
 8000b92:	e02c      	b.n	8000bee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	623b      	str	r3, [r7, #32]
          break;
 8000b9a:	e028      	b.n	8000bee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	623b      	str	r3, [r7, #32]
          break;
 8000ba4:	e023      	b.n	8000bee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	3308      	adds	r3, #8
 8000bac:	623b      	str	r3, [r7, #32]
          break;
 8000bae:	e01e      	b.n	8000bee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	330c      	adds	r3, #12
 8000bb6:	623b      	str	r3, [r7, #32]
          break;
 8000bb8:	e019      	b.n	8000bee <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	623b      	str	r3, [r7, #32]
          break;
 8000bc6:	e012      	b.n	8000bee <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d105      	bne.n	8000bdc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	611a      	str	r2, [r3, #16]
          break;
 8000bda:	e008      	b.n	8000bee <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	615a      	str	r2, [r3, #20]
          break;
 8000be6:	e002      	b.n	8000bee <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
          break;
 8000bec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	2bff      	cmp	r3, #255	; 0xff
 8000bf2:	d801      	bhi.n	8000bf8 <HAL_GPIO_Init+0xfc>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	e001      	b.n	8000bfc <HAL_GPIO_Init+0x100>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	2bff      	cmp	r3, #255	; 0xff
 8000c02:	d802      	bhi.n	8000c0a <HAL_GPIO_Init+0x10e>
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	e002      	b.n	8000c10 <HAL_GPIO_Init+0x114>
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	3b08      	subs	r3, #8
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	210f      	movs	r1, #15
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	401a      	ands	r2, r3
 8000c22:	6a39      	ldr	r1, [r7, #32]
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 8096 	beq.w	8000d6a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3e:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <HAL_GPIO_Init+0x2a0>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	4a56      	ldr	r2, [pc, #344]	; (8000d9c <HAL_GPIO_Init+0x2a0>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
 8000c4a:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <HAL_GPIO_Init+0x2a0>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000c56:	4a52      	ldr	r2, [pc, #328]	; (8000da0 <HAL_GPIO_Init+0x2a4>)
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c62:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	4013      	ands	r3, r2
 8000c78:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a49      	ldr	r2, [pc, #292]	; (8000da4 <HAL_GPIO_Init+0x2a8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d013      	beq.n	8000caa <HAL_GPIO_Init+0x1ae>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a48      	ldr	r2, [pc, #288]	; (8000da8 <HAL_GPIO_Init+0x2ac>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d00d      	beq.n	8000ca6 <HAL_GPIO_Init+0x1aa>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a47      	ldr	r2, [pc, #284]	; (8000dac <HAL_GPIO_Init+0x2b0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d007      	beq.n	8000ca2 <HAL_GPIO_Init+0x1a6>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a46      	ldr	r2, [pc, #280]	; (8000db0 <HAL_GPIO_Init+0x2b4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d101      	bne.n	8000c9e <HAL_GPIO_Init+0x1a2>
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x1b0>
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	e004      	b.n	8000cac <HAL_GPIO_Init+0x1b0>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e002      	b.n	8000cac <HAL_GPIO_Init+0x1b0>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <HAL_GPIO_Init+0x1b0>
 8000caa:	2300      	movs	r3, #0
 8000cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cae:	f002 0203 	and.w	r2, r2, #3
 8000cb2:	0092      	lsls	r2, r2, #2
 8000cb4:	4093      	lsls	r3, r2
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000cbc:	4938      	ldr	r1, [pc, #224]	; (8000da0 <HAL_GPIO_Init+0x2a4>)
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cd6:	4b37      	ldr	r3, [pc, #220]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4936      	ldr	r1, [pc, #216]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]
 8000ce2:	e006      	b.n	8000cf2 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce4:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	4931      	ldr	r1, [pc, #196]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d006      	beq.n	8000d0c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	492c      	ldr	r1, [pc, #176]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	604b      	str	r3, [r1, #4]
 8000d0a:	e006      	b.n	8000d1a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	4927      	ldr	r1, [pc, #156]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d16:	4013      	ands	r3, r2
 8000d18:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d006      	beq.n	8000d34 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	4922      	ldr	r1, [pc, #136]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	608b      	str	r3, [r1, #8]
 8000d32:	e006      	b.n	8000d42 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	491d      	ldr	r1, [pc, #116]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d006      	beq.n	8000d5c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	4918      	ldr	r1, [pc, #96]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	60cb      	str	r3, [r1, #12]
 8000d5a:	e006      	b.n	8000d6a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	4913      	ldr	r1, [pc, #76]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	f67f aed4 	bls.w	8000b20 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000d78:	bf00      	nop
 8000d7a:	372c      	adds	r7, #44	; 0x2c
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	10210000 	.word	0x10210000
 8000d88:	10110000 	.word	0x10110000
 8000d8c:	10120000 	.word	0x10120000
 8000d90:	10310000 	.word	0x10310000
 8000d94:	10320000 	.word	0x10320000
 8000d98:	10220000 	.word	0x10220000
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40010800 	.word	0x40010800
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40011400 	.word	0x40011400
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000dd4:	e003      	b.n	8000dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	041a      	lsls	r2, r3, #16
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	611a      	str	r2, [r3, #16]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dea:	b08b      	sub	sp, #44	; 0x2c
 8000dec:	af06      	add	r7, sp, #24
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e0ca      	b.n	8000f94 <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d106      	bne.n	8000e18 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f005 ff0a 	bl	8006c2c <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 ff87 	bl	8002d38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	687e      	ldr	r6, [r7, #4]
 8000e32:	466d      	mov	r5, sp
 8000e34:	f106 0410 	add.w	r4, r6, #16
 8000e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	602b      	str	r3, [r5, #0]
 8000e40:	1d33      	adds	r3, r6, #4
 8000e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f001 ff4d 	bl	8002ce4 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 ff8d 	bl	8002d70 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	e037      	b.n	8000ecc <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	015b      	lsls	r3, r3, #5
 8000e62:	4413      	add	r3, r2
 8000e64:	3329      	adds	r3, #41	; 0x29
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	b2d9      	uxtb	r1, r3
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	015b      	lsls	r3, r3, #5
 8000e74:	4413      	add	r3, r2
 8000e76:	3328      	adds	r3, #40	; 0x28
 8000e78:	460a      	mov	r2, r1
 8000e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	b299      	uxth	r1, r3
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	015b      	lsls	r3, r3, #5
 8000e86:	4413      	add	r3, r2
 8000e88:	3334      	adds	r3, #52	; 0x34
 8000e8a:	460a      	mov	r2, r1
 8000e8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	4413      	add	r3, r2
 8000e96:	332b      	adds	r3, #43	; 0x2b
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	015b      	lsls	r3, r3, #5
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3338      	adds	r3, #56	; 0x38
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	015b      	lsls	r3, r3, #5
 8000eb0:	4413      	add	r3, r2
 8000eb2:	333c      	adds	r3, #60	; 0x3c
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	015b      	lsls	r3, r3, #5
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b0e      	cmp	r3, #14
 8000ed0:	d9c4      	bls.n	8000e5c <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	e03c      	b.n	8000f52 <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	015b      	lsls	r3, r3, #5
 8000ede:	4413      	add	r3, r2
 8000ee0:	f203 2329 	addw	r3, r3, #553	; 0x229
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	b2d9      	uxtb	r1, r3
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	015b      	lsls	r3, r3, #5
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000ef8:	460a      	mov	r2, r1
 8000efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	b299      	uxth	r1, r3
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4413      	add	r3, r2
 8000f08:	3334      	adds	r3, #52	; 0x34
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	015b      	lsls	r3, r3, #5
 8000f14:	4413      	add	r3, r2
 8000f16:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	015b      	lsls	r3, r3, #5
 8000f24:	4413      	add	r3, r2
 8000f26:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	015b      	lsls	r3, r3, #5
 8000f34:	4413      	add	r3, r2
 8000f36:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3312      	adds	r3, #18
 8000f44:	015b      	lsls	r3, r3, #5
 8000f46:	4413      	add	r3, r2
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b0e      	cmp	r3, #14
 8000f56:	d9bf      	bls.n	8000ed8 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	687e      	ldr	r6, [r7, #4]
 8000f60:	466d      	mov	r5, sp
 8000f62:	f106 0410 	add.w	r4, r6, #16
 8000f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	602b      	str	r3, [r5, #0]
 8000f6e:	1d33      	adds	r3, r6, #4
 8000f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f001 ff08 	bl	8002d88 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fef2 	bl	8003d76 <USB_DevDisconnect>
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f9c <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <HAL_PCD_Start+0x16>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e016      	b.n	8000fe0 <HAL_PCD_Start+0x44>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f006 f89c 	bl	80070fa <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 fecb 	bl	8003d62 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fe97 	bl	8002d04 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 fec8 	bl	8003d8a <USB_ReadInterrupts>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001004:	d102      	bne.n	800100c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fad8 	bl	80015bc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f002 feba 	bl	8003d8a <USB_ReadInterrupts>
 8001016:	4603      	mov	r3, r0
 8001018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001020:	d112      	bne.n	8001048 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800102a:	b29a      	uxth	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001034:	b292      	uxth	r2, r2
 8001036:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f005 fe6b 	bl	8006d16 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001040:	2100      	movs	r1, #0
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f8d2 	bl	80011ec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fe9c 	bl	8003d8a <USB_ReadInterrupts>
 8001052:	4603      	mov	r3, r0
 8001054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800105c:	d10b      	bne.n	8001076 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001066:	b29a      	uxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001070:	b292      	uxth	r2, r2
 8001072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fe85 	bl	8003d8a <USB_ReadInterrupts>
 8001080:	4603      	mov	r3, r0
 8001082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800108a:	d10b      	bne.n	80010a4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001094:	b29a      	uxth	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800109e:	b292      	uxth	r2, r2
 80010a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fe6e 	bl	8003d8a <USB_ReadInterrupts>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010b8:	d126      	bne.n	8001108 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0204 	bic.w	r2, r2, #4
 80010cc:	b292      	uxth	r2, r2
 80010ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0208 	bic.w	r2, r2, #8
 80010e4:	b292      	uxth	r2, r2
 80010e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f005 fe4c 	bl	8006d88 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001102:	b292      	uxth	r2, r2
 8001104:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fe3c 	bl	8003d8a <USB_ReadInterrupts>
 8001112:	4603      	mov	r3, r0
 8001114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800111c:	d131      	bne.n	8001182 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001126:	b29a      	uxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 0208 	orr.w	r2, r2, #8
 8001130:	b292      	uxth	r2, r2
 8001132:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001148:	b292      	uxth	r2, r2
 800114a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0204 	orr.w	r2, r2, #4
 8001160:	b292      	uxth	r2, r2
 8001162:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fe0d 	bl	8003d8a <USB_ReadInterrupts>
 8001170:	4603      	mov	r3, r0
 8001172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800117a:	d002      	beq.n	8001182 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f005 fde9 	bl	8006d54 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f002 fdff 	bl	8003d8a <USB_ReadInterrupts>
 800118c:	4603      	mov	r3, r0
 800118e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001196:	d10e      	bne.n	80011b6 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011aa:	b292      	uxth	r2, r2
 80011ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f005 fda2 	bl	8006cfa <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 fde5 	bl	8003d8a <USB_ReadInterrupts>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ca:	d10b      	bne.n	80011e4 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011de:	b292      	uxth	r2, r2
 80011e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_PCD_SetAddress+0x1a>
 8001202:	2302      	movs	r3, #2
 8001204:	e013      	b.n	800122e <HAL_PCD_SetAddress+0x42>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	78fa      	ldrb	r2, [r7, #3]
 8001212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	78fa      	ldrb	r2, [r7, #3]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fd8c 	bl	8003d3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	4608      	mov	r0, r1
 8001240:	4611      	mov	r1, r2
 8001242:	461a      	mov	r2, r3
 8001244:	4603      	mov	r3, r0
 8001246:	70fb      	strb	r3, [r7, #3]
 8001248:	460b      	mov	r3, r1
 800124a:	803b      	strh	r3, [r7, #0]
 800124c:	4613      	mov	r3, r2
 800124e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800125c:	2b00      	cmp	r3, #0
 800125e:	da08      	bge.n	8001272 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001266:	015b      	lsls	r3, r3, #5
 8001268:	3328      	adds	r3, #40	; 0x28
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e008      	b.n	8001284 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001278:	015b      	lsls	r3, r3, #5
 800127a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800128a:	b2da      	uxtb	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	09db      	lsrs	r3, r3, #7
 8001298:	b2db      	uxtb	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80012a0:	883a      	ldrh	r2, [r7, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	78ba      	ldrb	r2, [r7, #2]
 80012aa:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_PCD_EP_Open+0x84>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e00e      	b.n	80012d8 <HAL_PCD_EP_Open+0xa2>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68f9      	ldr	r1, [r7, #12]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fd81 	bl	8002dd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 80012d6:	7afb      	ldrb	r3, [r7, #11]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 80012f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da08      	bge.n	800130a <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012fe:	015b      	lsls	r3, r3, #5
 8001300:	3328      	adds	r3, #40	; 0x28
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e008      	b.n	800131c <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001310:	015b      	lsls	r3, r3, #5
 8001312:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001322:	b2da      	uxtb	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	09db      	lsrs	r3, r3, #7
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_PCD_EP_Close+0x66>
 8001342:	2302      	movs	r3, #2
 8001344:	e00e      	b.n	8001364 <HAL_PCD_EP_Close+0x84>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68f9      	ldr	r1, [r7, #12]
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fffd 	bl	8003354 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	460b      	mov	r3, r1
 800137a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001380:	7afb      	ldrb	r3, [r7, #11]
 8001382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001386:	015b      	lsls	r3, r3, #5
 8001388:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2200      	movs	r2, #0
 80013a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 80013b6:	7afb      	ldrb	r3, [r7, #11]
 80013b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d106      	bne.n	80013ce <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6979      	ldr	r1, [r7, #20]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 f94c 	bl	8003664 <USB_EPStartXfer>
 80013cc:	e005      	b.n	80013da <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6979      	ldr	r1, [r7, #20]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 f945 	bl	8003664 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	3312      	adds	r3, #18
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	4413      	add	r3, r2
 80013fe:	3304      	adds	r3, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	460b      	mov	r3, r1
 800141c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001422:	7afb      	ldrb	r3, [r7, #11]
 8001424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001428:	015b      	lsls	r3, r3, #5
 800142a:	3328      	adds	r3, #40	; 0x28
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2201      	movs	r2, #1
 8001448:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001450:	b2da      	uxtb	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8001456:	7afb      	ldrb	r3, [r7, #11]
 8001458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6979      	ldr	r1, [r7, #20]
 8001466:	4618      	mov	r0, r3
 8001468:	f002 f8fc 	bl	8003664 <USB_EPStartXfer>
 800146c:	e005      	b.n	800147a <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6979      	ldr	r1, [r7, #20]
 8001474:	4618      	mov	r0, r3
 8001476:	f002 f8f5 	bl	8003664 <USB_EPStartXfer>
  }

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8001494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da08      	bge.n	80014ae <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014a2:	015b      	lsls	r3, r3, #5
 80014a4:	3328      	adds	r3, #40	; 0x28
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e006      	b.n	80014bc <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2201      	movs	r2, #1
 80014c0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80014ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	09db      	lsrs	r3, r3, #7
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_PCD_EP_SetStall+0x68>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e01c      	b.n	8001526 <HAL_PCD_EP_SetStall+0xa2>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68f9      	ldr	r1, [r7, #12]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fb34 	bl	8003b68 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001506:	2b00      	cmp	r3, #0
 8001508:	d108      	bne.n	800151c <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8001514:	4619      	mov	r1, r3
 8001516:	4610      	mov	r0, r2
 8001518:	f002 fc48 	bl	8003dac <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 800153e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001542:	2b00      	cmp	r3, #0
 8001544:	da08      	bge.n	8001558 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800154c:	015b      	lsls	r3, r3, #5
 800154e:	3328      	adds	r3, #40	; 0x28
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e006      	b.n	8001566 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	015b      	lsls	r3, r3, #5
 800155c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001572:	b2da      	uxtb	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	09db      	lsrs	r3, r3, #7
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_PCD_EP_ClrStall+0x68>
 8001592:	2302      	movs	r3, #2
 8001594:	e00e      	b.n	80015b4 <HAL_PCD_EP_ClrStall+0x86>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68f9      	ldr	r1, [r7, #12]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fb3f 	bl	8003c28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 80015d0:	2300      	movs	r3, #0
 80015d2:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80015d8:	e308      	b.n	8001bec <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 80015e6:	7e7b      	ldrb	r3, [r7, #25]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 812a 	bne.w	8001842 <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d14d      	bne.n	8001696 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800160a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800160e:	b29b      	uxth	r3, r3
 8001610:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3328      	adds	r3, #40	; 0x28
 8001616:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001620:	b29b      	uxth	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	3302      	adds	r3, #2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	4413      	add	r3, r2
 8001636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	441a      	add	r2, r3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001654:	2100      	movs	r1, #0
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f005 fb38 	bl	8006ccc <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 82c1 	beq.w	8001bec <PCD_EP_ISR_Handler+0x630>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 82bc 	bne.w	8001bec <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b292      	uxth	r2, r2
 8001688:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001694:	e2aa      	b.n	8001bec <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800169c:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016a8:	89bb      	ldrh	r3, [r7, #12]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d031      	beq.n	8001718 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016bc:	b29b      	uxth	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	3306      	adds	r3, #6
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	889a      	ldrh	r2, [r3, #4]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f002 fbaa 	bl	8003e4e <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	b299      	uxth	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f640 738f 	movw	r3, #3983	; 0xf8f
 800170a:	400b      	ands	r3, r1
 800170c:	b29b      	uxth	r3, r3
 800170e:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f005 fab1 	bl	8006c78 <HAL_PCD_SetupStageCallback>
 8001716:	e269      	b.n	8001bec <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001718:	89bb      	ldrh	r3, [r7, #12]
 800171a:	b29b      	uxth	r3, r3
 800171c:	b21b      	sxth	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	f280 8264 	bge.w	8001bec <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	b299      	uxth	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001734:	400b      	ands	r3, r1
 8001736:	b29b      	uxth	r3, r3
 8001738:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001742:	b29b      	uxth	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4413      	add	r3, r2
 800174e:	3306      	adds	r3, #6
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d011      	beq.n	8001794 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	6959      	ldr	r1, [r3, #20]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	889a      	ldrh	r2, [r3, #4]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	b29b      	uxth	r3, r3
 8001782:	f002 fb64 	bl	8003e4e <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	441a      	add	r2, r3
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001794:	2100      	movs	r1, #0
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f005 fa80 	bl	8006c9c <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	3306      	adds	r3, #6
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b3e      	cmp	r3, #62	; 0x3e
 80017bc:	d918      	bls.n	80017f0 <PCD_EP_ISR_Handler+0x234>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	82fb      	strh	r3, [r7, #22]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <PCD_EP_ISR_Handler+0x21c>
 80017d2:	8afb      	ldrh	r3, [r7, #22]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	82fb      	strh	r3, [r7, #22]
 80017d8:	8afb      	ldrh	r3, [r7, #22]
 80017da:	029b      	lsls	r3, r3, #10
 80017dc:	b29b      	uxth	r3, r3
 80017de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e012      	b.n	8001816 <PCD_EP_ISR_Handler+0x25a>
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	82fb      	strh	r3, [r7, #22]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <PCD_EP_ISR_Handler+0x24e>
 8001804:	8afb      	ldrh	r3, [r7, #22]
 8001806:	3301      	adds	r3, #1
 8001808:	82fb      	strh	r3, [r7, #22]
 800180a:	8afb      	ldrh	r3, [r7, #22]
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	b29b      	uxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001826:	b29c      	uxth	r4, r3
 8001828:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800182c:	b29c      	uxth	r4, r3
 800182e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001832:	b29c      	uxth	r4, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b98      	ldr	r3, [pc, #608]	; (8001a9c <PCD_EP_ISR_Handler+0x4e0>)
 800183a:	4323      	orrs	r3, r4
 800183c:	b29b      	uxth	r3, r3
 800183e:	8013      	strh	r3, [r2, #0]
 8001840:	e1d4      	b.n	8001bec <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	7e7b      	ldrb	r3, [r7, #25]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001854:	89bb      	ldrh	r3, [r7, #12]
 8001856:	b29b      	uxth	r3, r3
 8001858:	b21b      	sxth	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	f280 80d0 	bge.w	8001a00 <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	7e7b      	ldrb	r3, [r7, #25]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b299      	uxth	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	7e7b      	ldrb	r3, [r7, #25]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	441a      	add	r2, r3
 800187c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001880:	400b      	ands	r3, r1
 8001882:	b29b      	uxth	r3, r3
 8001884:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001886:	7e7b      	ldrb	r3, [r7, #25]
 8001888:	015b      	lsls	r3, r3, #5
 800188a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	7a9b      	ldrb	r3, [r3, #10]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d122      	bne.n	80018e2 <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	3306      	adds	r3, #6
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c6:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 80018c8:	8b7b      	ldrh	r3, [r7, #26]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d073      	beq.n	80019b6 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	6959      	ldr	r1, [r3, #20]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	889a      	ldrh	r2, [r3, #4]
 80018da:	8b7b      	ldrh	r3, [r7, #26]
 80018dc:	f002 fab7 	bl	8003e4e <USB_ReadPMA>
 80018e0:	e069      	b.n	80019b6 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d022      	beq.n	8001942 <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001904:	b29b      	uxth	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	3302      	adds	r3, #2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	4413      	add	r3, r2
 800191a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001926:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8001928:	8b7b      	ldrh	r3, [r7, #26]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d02b      	beq.n	8001986 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	6959      	ldr	r1, [r3, #20]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	88da      	ldrh	r2, [r3, #6]
 800193a:	8b7b      	ldrh	r3, [r7, #26]
 800193c:	f002 fa87 	bl	8003e4e <USB_ReadPMA>
 8001940:	e021      	b.n	8001986 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	3306      	adds	r3, #6
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	4413      	add	r3, r2
 8001960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800196c:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 800196e:	8b7b      	ldrh	r3, [r7, #26]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	6959      	ldr	r1, [r3, #20]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	891a      	ldrh	r2, [r3, #8]
 8001980:	8b7b      	ldrh	r3, [r7, #26]
 8001982:	f002 fa64 	bl	8003e4e <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	b29a      	uxth	r2, r3
 8001998:	f640 730f 	movw	r3, #3855	; 0xf0f
 800199c:	4013      	ands	r3, r2
 800199e:	b299      	uxth	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	441a      	add	r2, r3
 80019ae:	4b3c      	ldr	r3, [pc, #240]	; (8001aa0 <PCD_EP_ISR_Handler+0x4e4>)
 80019b0:	430b      	orrs	r3, r1
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	8b7b      	ldrh	r3, [r7, #26]
 80019bc:	441a      	add	r2, r3
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	8b7b      	ldrh	r3, [r7, #26]
 80019c8:	441a      	add	r2, r3
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <PCD_EP_ISR_Handler+0x424>
 80019d6:	8b7a      	ldrh	r2, [r7, #26]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d206      	bcs.n	80019ee <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f005 f958 	bl	8006c9c <HAL_PCD_DataOutStageCallback>
 80019ec:	e008      	b.n	8001a00 <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	7819      	ldrb	r1, [r3, #0]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fcb6 	bl	800136c <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a00:	89bb      	ldrh	r3, [r7, #12]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80ef 	beq.w	8001bec <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a0e:	7e7b      	ldrb	r3, [r7, #25]
 8001a10:	015b      	lsls	r3, r3, #5
 8001a12:	3328      	adds	r3, #40	; 0x28
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	7e7b      	ldrb	r3, [r7, #25]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	7e7a      	ldrb	r2, [r7, #25]
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	440a      	add	r2, r1
 8001a36:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	7a9b      	ldrb	r3, [r3, #10]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d12c      	bne.n	8001aa4 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8083 	beq.w	8001b88 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	6959      	ldr	r1, [r3, #20]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	889a      	ldrh	r2, [r3, #4]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	f002 f995 	bl	8003dc2 <USB_WritePMA>
 8001a98:	e076      	b.n	8001b88 <PCD_EP_ISR_Handler+0x5cc>
 8001a9a:	bf00      	nop
 8001a9c:	ffff8080 	.word	0xffff8080
 8001aa0:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d026      	beq.n	8001b0c <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d031      	beq.n	8001b58 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	6959      	ldr	r1, [r3, #20]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	88da      	ldrh	r2, [r3, #6]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f002 f95c 	bl	8003dc2 <USB_WritePMA>
 8001b0a:	e025      	b.n	8001b58 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3306      	adds	r3, #6
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00a      	beq.n	8001b58 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	6959      	ldr	r1, [r3, #20]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	891a      	ldrh	r2, [r3, #8]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	f002 f935 	bl	8003dc2 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001b6e:	4013      	ands	r3, r2
 8001b70:	b299      	uxth	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	441a      	add	r2, r3
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <PCD_EP_ISR_Handler+0x650>)
 8001b82:	430b      	orrs	r3, r1
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	441a      	add	r2, r3
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d106      	bne.n	8001bda <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f005 f87a 	bl	8006ccc <HAL_PCD_DataInStageCallback>
 8001bd8:	e008      	b.n	8001bec <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	7819      	ldrb	r1, [r3, #0]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fc11 	bl	800140e <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	81fa      	strh	r2, [r7, #14]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f6ff acec 	blt.w	80015da <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3724      	adds	r7, #36	; 0x24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd90      	pop	{r4, r7, pc}
 8001c0c:	ffffc080 	.word	0xffffc080

08001c10 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	817b      	strh	r3, [r7, #10]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001c26:	897b      	ldrh	r3, [r7, #10]
 8001c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001c30:	897b      	ldrh	r3, [r7, #10]
 8001c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c36:	015b      	lsls	r3, r3, #5
 8001c38:	3328      	adds	r3, #40	; 0x28
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e006      	b.n	8001c50 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	015b      	lsls	r3, r3, #5
 8001c46:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001c50:	893b      	ldrh	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d107      	bne.n	8001c66 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	809a      	strh	r2, [r3, #4]
 8001c64:	e00b      	b.n	8001c7e <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8087 	beq.w	8001db4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ca6:	4b92      	ldr	r3, [pc, #584]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d00c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb2:	4b8f      	ldr	r3, [pc, #572]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d112      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x58>
 8001cbe:	4b8c      	ldr	r3, [pc, #560]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	4b88      	ldr	r3, [pc, #544]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d06c      	beq.n	8001db2 <HAL_RCC_OscConfig+0x126>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d168      	bne.n	8001db2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e22d      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cec:	d106      	bne.n	8001cfc <HAL_RCC_OscConfig+0x70>
 8001cee:	4b80      	ldr	r3, [pc, #512]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7f      	ldr	r2, [pc, #508]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e02e      	b.n	8001d5a <HAL_RCC_OscConfig+0xce>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x92>
 8001d04:	4b7a      	ldr	r3, [pc, #488]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a79      	ldr	r2, [pc, #484]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b77      	ldr	r3, [pc, #476]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a76      	ldr	r2, [pc, #472]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e01d      	b.n	8001d5a <HAL_RCC_OscConfig+0xce>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCC_OscConfig+0xb6>
 8001d28:	4b71      	ldr	r3, [pc, #452]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a70      	ldr	r2, [pc, #448]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b6e      	ldr	r3, [pc, #440]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a6d      	ldr	r2, [pc, #436]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e00b      	b.n	8001d5a <HAL_RCC_OscConfig+0xce>
 8001d42:	4b6b      	ldr	r3, [pc, #428]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a6a      	ldr	r2, [pc, #424]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a67      	ldr	r2, [pc, #412]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d013      	beq.n	8001d8a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7fe fa4d 	bl	8000200 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d6a:	f7fe fa49 	bl	8000200 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b64      	cmp	r3, #100	; 0x64
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e1e1      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7c:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0xde>
 8001d88:	e014      	b.n	8001db4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7fe fa39 	bl	8000200 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d92:	f7fe fa35 	bl	8000200 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b64      	cmp	r3, #100	; 0x64
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e1cd      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x106>
 8001db0:	e000      	b.n	8001db4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d063      	beq.n	8001e88 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00b      	beq.n	8001de4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dcc:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d11c      	bne.n	8001e12 <HAL_RCC_OscConfig+0x186>
 8001dd8:	4b45      	ldr	r3, [pc, #276]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d116      	bne.n	8001e12 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de4:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_OscConfig+0x170>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e1a1      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4939      	ldr	r1, [pc, #228]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e10:	e03a      	b.n	8001e88 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d020      	beq.n	8001e5c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x268>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7fe f9ee 	bl	8000200 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e28:	f7fe f9ea 	bl	8000200 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e182      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4926      	ldr	r1, [pc, #152]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
 8001e5a:	e015      	b.n	8001e88 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_RCC_OscConfig+0x268>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7fe f9cd 	bl	8000200 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7fe f9c9 	bl	8000200 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e161      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d039      	beq.n	8001f08 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d019      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7fe f9ad 	bl	8000200 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7fe f9a9 	bl	8000200 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e141      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_RCC_OscConfig+0x264>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f000 fab1 	bl	8002430 <RCC_Delay>
 8001ece:	e01b      	b.n	8001f08 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7fe f993 	bl	8000200 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001edc:	e00e      	b.n	8001efc <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ede:	f7fe f98f 	bl	8000200 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d907      	bls.n	8001efc <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e127      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	42420000 	.word	0x42420000
 8001ef8:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	4b92      	ldr	r3, [pc, #584]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ea      	bne.n	8001ede <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a6 	beq.w	8002062 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10d      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a87      	ldr	r2, [pc, #540]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b85      	ldr	r3, [pc, #532]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b82      	ldr	r3, [pc, #520]	; (800214c <HAL_RCC_OscConfig+0x4c0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b7f      	ldr	r3, [pc, #508]	; (800214c <HAL_RCC_OscConfig+0x4c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7e      	ldr	r2, [pc, #504]	; (800214c <HAL_RCC_OscConfig+0x4c0>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe f951 	bl	8000200 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f62:	f7fe f94d 	bl	8000200 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b64      	cmp	r3, #100	; 0x64
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0e5      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b75      	ldr	r3, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x4c0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x30a>
 8001f88:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a6e      	ldr	r2, [pc, #440]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e02d      	b.n	8001ff2 <HAL_RCC_OscConfig+0x366>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x32c>
 8001f9e:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a69      	ldr	r2, [pc, #420]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a66      	ldr	r2, [pc, #408]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
 8001fb6:	e01c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x366>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x34e>
 8001fc0:	4b61      	ldr	r3, [pc, #388]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a60      	ldr	r2, [pc, #384]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	4b5e      	ldr	r3, [pc, #376]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a5d      	ldr	r2, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x366>
 8001fda:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a5a      	ldr	r2, [pc, #360]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b58      	ldr	r3, [pc, #352]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a57      	ldr	r2, [pc, #348]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d015      	beq.n	8002026 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe f901 	bl	8000200 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7fe f8fd 	bl	8000200 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e093      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ee      	beq.n	8002002 <HAL_RCC_OscConfig+0x376>
 8002024:	e014      	b.n	8002050 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7fe f8eb 	bl	8000200 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe f8e7 	bl	8000200 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e07d      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	4b40      	ldr	r3, [pc, #256]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ee      	bne.n	800202e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a3b      	ldr	r2, [pc, #236]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d069      	beq.n	800213e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206a:	4b37      	ldr	r3, [pc, #220]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b08      	cmp	r3, #8
 8002074:	d061      	beq.n	800213a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d146      	bne.n	800210c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b34      	ldr	r3, [pc, #208]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe f8bc 	bl	8000200 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe f8b8 	bl	8000200 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e050      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b2:	d108      	bne.n	80020c6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4921      	ldr	r1, [pc, #132]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a19      	ldr	r1, [r3, #32]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	430b      	orrs	r3, r1
 80020d8:	491b      	ldr	r1, [pc, #108]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe f88c 	bl	8000200 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ec:	f7fe f888 	bl	8000200 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e020      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x460>
 800210a:	e018      	b.n	800213e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe f875 	bl	8000200 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe f871 	bl	8000200 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e009      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_OscConfig+0x4bc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x48e>
 8002138:	e001      	b.n	800213e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
 8002150:	42420060 	.word	0x42420060

08002154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002162:	4b7e      	ldr	r3, [pc, #504]	; (800235c <HAL_RCC_ClockConfig+0x208>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d910      	bls.n	8002192 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002170:	4b7a      	ldr	r3, [pc, #488]	; (800235c <HAL_RCC_ClockConfig+0x208>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 0207 	bic.w	r2, r3, #7
 8002178:	4978      	ldr	r1, [pc, #480]	; (800235c <HAL_RCC_ClockConfig+0x208>)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002180:	4b76      	ldr	r3, [pc, #472]	; (800235c <HAL_RCC_ClockConfig+0x208>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d001      	beq.n	8002192 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e0e0      	b.n	8002354 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d020      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021aa:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4a6c      	ldr	r2, [pc, #432]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 80021b0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021b4:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c2:	4b67      	ldr	r3, [pc, #412]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a66      	ldr	r2, [pc, #408]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 80021c8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021cc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ce:	4b64      	ldr	r3, [pc, #400]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4961      	ldr	r1, [pc, #388]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d06a      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f4:	4b5a      	ldr	r3, [pc, #360]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d115      	bne.n	800222c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0a7      	b.n	8002354 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d107      	bne.n	800221c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	4b54      	ldr	r3, [pc, #336]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e09b      	b.n	8002354 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e093      	b.n	8002354 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222c:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 0203 	bic.w	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4949      	ldr	r1, [pc, #292]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800223e:	f7fd ffdf 	bl	8000200 <HAL_GetTick>
 8002242:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d112      	bne.n	8002272 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224e:	f7fd ffd7 	bl	8000200 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e077      	b.n	8002354 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002264:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b04      	cmp	r3, #4
 800226e:	d1ee      	bne.n	800224e <HAL_RCC_ClockConfig+0xfa>
 8002270:	e027      	b.n	80022c2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d11d      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fd ffc0 	bl	8000200 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e060      	b.n	8002354 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002292:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	d1ee      	bne.n	800227c <HAL_RCC_ClockConfig+0x128>
 800229e:	e010      	b.n	80022c2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a0:	f7fd ffae 	bl	8000200 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e04e      	b.n	8002354 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1ee      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80022c2:	4b26      	ldr	r3, [pc, #152]	; (800235c <HAL_RCC_ClockConfig+0x208>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d210      	bcs.n	80022f2 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_ClockConfig+0x208>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 0207 	bic.w	r2, r3, #7
 80022d8:	4920      	ldr	r1, [pc, #128]	; (800235c <HAL_RCC_ClockConfig+0x208>)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <HAL_RCC_ClockConfig+0x208>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e030      	b.n	8002354 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4915      	ldr	r1, [pc, #84]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	490d      	ldr	r1, [pc, #52]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002330:	f000 f81c 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8002334:	4601      	mov	r1, r0
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_RCC_ClockConfig+0x20c>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_RCC_ClockConfig+0x210>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	fa21 f303 	lsr.w	r3, r1, r3
 8002348:	4a07      	ldr	r2, [pc, #28]	; (8002368 <HAL_RCC_ClockConfig+0x214>)
 800234a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800234c:	200f      	movs	r0, #15
 800234e:	f7fd ff15 	bl	800017c <HAL_InitTick>
  
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40022000 	.word	0x40022000
 8002360:	40021000 	.word	0x40021000
 8002364:	080074c4 	.word	0x080074c4
 8002368:	2000011c 	.word	0x2000011c

0800236c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b490      	push	{r4, r7}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002374:	1d3c      	adds	r4, r7, #4
 8002376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800237c:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb4>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d002      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x40>
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0x46>
 80023aa:	e02d      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ae:	623b      	str	r3, [r7, #32]
      break;
 80023b0:	e02d      	b.n	800240e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	0c9b      	lsrs	r3, r3, #18
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023be:	4413      	add	r3, r2
 80023c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0c5b      	lsrs	r3, r3, #17
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023de:	4413      	add	r3, r2
 80023e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023e4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ea:	fb02 f203 	mul.w	r2, r2, r3
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	e004      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	623b      	str	r3, [r7, #32]
      break;
 8002406:	e002      	b.n	800240e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <HAL_RCC_GetSysClockFreq+0xbc>)
 800240a:	623b      	str	r3, [r7, #32]
      break;
 800240c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240e:	6a3b      	ldr	r3, [r7, #32]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bc90      	pop	{r4, r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	08007440 	.word	0x08007440
 8002420:	08007450 	.word	0x08007450
 8002424:	40021000 	.word	0x40021000
 8002428:	007a1200 	.word	0x007a1200
 800242c:	003d0900 	.word	0x003d0900

08002430 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <RCC_Delay+0x34>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <RCC_Delay+0x38>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0a5b      	lsrs	r3, r3, #9
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800244c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	60fa      	str	r2, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f9      	bne.n	800244c <RCC_Delay+0x1c>
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	2000011c 	.word	0x2000011c
 8002468:	10624dd3 	.word	0x10624dd3

0800246c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d07d      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248c:	4b4f      	ldr	r3, [pc, #316]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002498:	4b4c      	ldr	r3, [pc, #304]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	4a4b      	ldr	r2, [pc, #300]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a2:	61d3      	str	r3, [r2, #28]
 80024a4:	4b49      	ldr	r3, [pc, #292]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b0:	2301      	movs	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d118      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a42      	ldr	r2, [pc, #264]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024cc:	f7fd fe98 	bl	8000200 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	e008      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7fd fe94 	bl	8000200 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e06d      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d02e      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	429a      	cmp	r2, r3
 800250e:	d027      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002510:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002518:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800251a:	4b2e      	ldr	r3, [pc, #184]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002520:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002526:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d014      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fd fe63 	bl	8000200 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7fd fe5f 	bl	8000200 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e036      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ee      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4917      	ldr	r1, [pc, #92]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	4313      	orrs	r3, r2
 8002570:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	4a13      	ldr	r2, [pc, #76]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002582:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	490b      	ldr	r1, [pc, #44]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4904      	ldr	r1, [pc, #16]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40007000 	.word	0x40007000
 80025d4:	42420440 	.word	0x42420440

080025d8 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e01d      	b.n	8002626 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f004 f99e 	bl	8006940 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f000 f8f8 	bl	800280c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2201      	movs	r2, #1
 8002640:	6839      	ldr	r1, [r7, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fae8 	bl	8002c18 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0b      	ldr	r2, [pc, #44]	; (800267c <HAL_TIM_PWM_Start+0x4c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d107      	bne.n	8002662 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40012c00 	.word	0x40012c00

08002680 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002696:	2302      	movs	r3, #2
 8002698:	e0b4      	b.n	8002804 <HAL_TIM_PWM_ConfigChannel+0x184>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b0c      	cmp	r3, #12
 80026ae:	f200 809f 	bhi.w	80027f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80026b2:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b8:	080026ed 	.word	0x080026ed
 80026bc:	080027f1 	.word	0x080027f1
 80026c0:	080027f1 	.word	0x080027f1
 80026c4:	080027f1 	.word	0x080027f1
 80026c8:	0800272d 	.word	0x0800272d
 80026cc:	080027f1 	.word	0x080027f1
 80026d0:	080027f1 	.word	0x080027f1
 80026d4:	080027f1 	.word	0x080027f1
 80026d8:	0800276f 	.word	0x0800276f
 80026dc:	080027f1 	.word	0x080027f1
 80026e0:	080027f1 	.word	0x080027f1
 80026e4:	080027f1 	.word	0x080027f1
 80026e8:	080027af 	.word	0x080027af
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f8f0 	bl	80028d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0208 	orr.w	r2, r2, #8
 8002706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0204 	bic.w	r2, r2, #4
 8002716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6999      	ldr	r1, [r3, #24]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	619a      	str	r2, [r3, #24]
    }
    break;
 800272a:	e062      	b.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f93c 	bl	80029b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6999      	ldr	r1, [r3, #24]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	021a      	lsls	r2, r3, #8
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	619a      	str	r2, [r3, #24]
    }
    break;
 800276c:	e041      	b.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f98b 	bl	8002a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0208 	orr.w	r2, r2, #8
 8002788:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0204 	bic.w	r2, r2, #4
 8002798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69d9      	ldr	r1, [r3, #28]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	61da      	str	r2, [r3, #28]
    }
    break;
 80027ac:	e021      	b.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f9db 	bl	8002b70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027c8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69d9      	ldr	r1, [r3, #28]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	021a      	lsls	r2, r3, #8
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	61da      	str	r2, [r3, #28]
    }
    break;
 80027ee:	e000      	b.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80027f0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <TIM_Base_SetConfig+0xc0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00b      	beq.n	8002840 <TIM_Base_SetConfig+0x34>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282e:	d007      	beq.n	8002840 <TIM_Base_SetConfig+0x34>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a27      	ldr	r2, [pc, #156]	; (80028d0 <TIM_Base_SetConfig+0xc4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d003      	beq.n	8002840 <TIM_Base_SetConfig+0x34>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <TIM_Base_SetConfig+0xc8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d108      	bne.n	8002852 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <TIM_Base_SetConfig+0xc0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00b      	beq.n	8002872 <TIM_Base_SetConfig+0x66>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002860:	d007      	beq.n	8002872 <TIM_Base_SetConfig+0x66>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <TIM_Base_SetConfig+0xc4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <TIM_Base_SetConfig+0x66>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a19      	ldr	r2, [pc, #100]	; (80028d4 <TIM_Base_SetConfig+0xc8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d108      	bne.n	8002884 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800288a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <TIM_Base_SetConfig+0xc0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d103      	bne.n	80028bc <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	615a      	str	r2, [r3, #20]
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800

080028d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f023 0201 	bic.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f023 0302 	bic.w	r3, r3, #2
 800292c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <TIM_OC1_SetConfig+0xd4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d10c      	bne.n	800295a <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0308 	bic.w	r3, r3, #8
 8002946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a13      	ldr	r2, [pc, #76]	; (80029ac <TIM_OC1_SetConfig+0xd4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d111      	bne.n	8002986 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	621a      	str	r2, [r3, #32]
}
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40012c00 	.word	0x40012c00

080029b0 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0210 	bic.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f023 0320 	bic.w	r3, r3, #32
 8002a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <TIM_OC2_SetConfig+0xdc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10d      	bne.n	8002a38 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a36:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <TIM_OC2_SetConfig+0xdc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d113      	bne.n	8002a68 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	621a      	str	r2, [r3, #32]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40012c00 	.word	0x40012c00

08002a90 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <TIM_OC3_SetConfig+0xdc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d10d      	bne.n	8002b16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b14:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <TIM_OC3_SetConfig+0xdc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d113      	bne.n	8002b46 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	621a      	str	r2, [r3, #32]
}
 8002b60:	bf00      	nop
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40012c00 	.word	0x40012c00

08002b70 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002baa:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bc6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	031b      	lsls	r3, r3, #12
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <TIM_OC4_SetConfig+0xa4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d109      	bne.n	8002bf0 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	019b      	lsls	r3, r3, #6
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	621a      	str	r2, [r3, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40012c00 	.word	0x40012c00

08002c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a1a      	ldr	r2, [r3, #32]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	621a      	str	r2, [r3, #32]
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e032      	b.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c92:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb4:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6899      	ldr	r1, [r3, #8]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	f107 0014 	add.w	r0, r7, #20
 8002cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	b004      	add	sp, #16
 8002d02:	4770      	bx	lr

08002d04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002d10:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002d14:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4313      	orrs	r3, r2
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002d44:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8002d48:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d88:	b084      	sub	sp, #16
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	f107 0014 	add.w	r0, r7, #20
 8002d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ffa2 	bl	8002d04 <USB_EnableGlobalInt>
    
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dcc:	b004      	add	sp, #16
 8002dce:	4770      	bx	lr

08002dd0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002dd0:	b490      	push	{r4, r7}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	78db      	ldrb	r3, [r3, #3]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d85f      	bhi.n	8002ea2 <USB_ActivateEndpoint+0xd2>
 8002de2:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <USB_ActivateEndpoint+0x18>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002df9 	.word	0x08002df9
 8002dec:	08002e77 	.word	0x08002e77
 8002df0:	08002e25 	.word	0x08002e25
 8002df4:	08002e4b 	.word	0x08002e4b
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	801a      	strh	r2, [r3, #0]
    break;
 8002e22:	e03f      	b.n	8002ea4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	7812      	ldrb	r2, [r2, #0]
 8002e38:	0092      	lsls	r2, r2, #2
 8002e3a:	440a      	add	r2, r1
 8002e3c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	8013      	strh	r3, [r2, #0]
    break;
 8002e48:	e02c      	b.n	8002ea4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002e70:	b292      	uxth	r2, r2
 8002e72:	801a      	strh	r2, [r3, #0]
    break;
 8002e74:	e016      	b.n	8002ea4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	801a      	strh	r2, [r3, #0]
    break;
 8002ea0:	e000      	b.n	8002ea4 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 8002ea2:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b299      	uxth	r1, r3
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	441a      	add	r2, r3
 8002ece:	4b75      	ldr	r3, [pc, #468]	; (80030a4 <USB_ActivateEndpoint+0x2d4>)
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7a9b      	ldrb	r3, [r3, #10]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 80e8 	bne.w	80030b0 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	785b      	ldrb	r3, [r3, #1]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d04c      	beq.n	8002f82 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	889b      	ldrh	r3, [r3, #4]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	0059      	lsls	r1, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	005a      	lsls	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f0e:	460a      	mov	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <USB_ActivateEndpoint+0x180>
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	b299      	uxth	r1, r3
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	4b57      	ldr	r3, [pc, #348]	; (80030a8 <USB_ActivateEndpoint+0x2d8>)
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f66:	b29c      	uxth	r4, r3
 8002f68:	f084 0320 	eor.w	r3, r4, #32
 8002f6c:	b29c      	uxth	r4, r3
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <USB_ActivateEndpoint+0x2d4>)
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	8013      	strh	r3, [r2, #0]
 8002f80:	e1d9      	b.n	8003336 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	889b      	ldrh	r3, [r3, #4]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	0059      	lsls	r1, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	005a      	lsls	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002faa:	460a      	mov	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3306      	adds	r3, #6
 8002fc2:	005a      	lsls	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b3e      	cmp	r3, #62	; 0x3e
 8002fd4:	d918      	bls.n	8003008 <USB_ActivateEndpoint+0x238>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	81fb      	strh	r3, [r7, #14]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <USB_ActivateEndpoint+0x220>
 8002fea:	89fb      	ldrh	r3, [r7, #14]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	81fb      	strh	r3, [r7, #14]
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e012      	b.n	800302e <USB_ActivateEndpoint+0x25e>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	81fb      	strh	r3, [r7, #14]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <USB_ActivateEndpoint+0x252>
 800301c:	89fb      	ldrh	r3, [r7, #14]
 800301e:	3301      	adds	r3, #1
 8003020:	81fb      	strh	r3, [r7, #14]
 8003022:	89fb      	ldrh	r3, [r7, #14]
 8003024:	029b      	lsls	r3, r3, #10
 8003026:	b29b      	uxth	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <USB_ActivateEndpoint+0x29c>
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29a      	uxth	r2, r3
 8003052:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003056:	4013      	ands	r3, r2
 8003058:	b299      	uxth	r1, r3
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	441a      	add	r2, r3
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <USB_ActivateEndpoint+0x2dc>)
 8003066:	430b      	orrs	r3, r1
 8003068:	b29b      	uxth	r3, r3
 800306a:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800307e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003082:	b29c      	uxth	r4, r3
 8003084:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003088:	b29c      	uxth	r4, r3
 800308a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800308e:	b29c      	uxth	r4, r3
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	441a      	add	r2, r3
 800309a:	4b02      	ldr	r3, [pc, #8]	; (80030a4 <USB_ActivateEndpoint+0x2d4>)
 800309c:	4323      	orrs	r3, r4
 800309e:	b29b      	uxth	r3, r3
 80030a0:	8013      	strh	r3, [r2, #0]
 80030a2:	e148      	b.n	8003336 <USB_ActivateEndpoint+0x566>
 80030a4:	ffff8080 	.word	0xffff8080
 80030a8:	ffff80c0 	.word	0xffff80c0
 80030ac:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	f640 630f 	movw	r3, #3599	; 0xe0f
 80030c2:	4013      	ands	r3, r2
 80030c4:	b299      	uxth	r1, r3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	441a      	add	r2, r3
 80030d0:	4b9c      	ldr	r3, [pc, #624]	; (8003344 <USB_ActivateEndpoint+0x574>)
 80030d2:	430b      	orrs	r3, r1
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	88db      	ldrh	r3, [r3, #6]
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	b29b      	uxth	r3, r3
 80030e0:	0059      	lsls	r1, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	005a      	lsls	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030fe:	460a      	mov	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	891b      	ldrh	r3, [r3, #8]
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	b29b      	uxth	r3, r3
 800310a:	0059      	lsls	r1, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003112:	b29b      	uxth	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	3304      	adds	r3, #4
 8003120:	005a      	lsls	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800312a:	460a      	mov	r2, r1
 800312c:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 8083 	bne.w	800323e <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d013      	beq.n	8003176 <USB_ActivateEndpoint+0x3a6>
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29a      	uxth	r2, r3
 800315c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003160:	4013      	ands	r3, r2
 8003162:	b299      	uxth	r1, r3
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	441a      	add	r2, r3
 800316e:	4b76      	ldr	r3, [pc, #472]	; (8003348 <USB_ActivateEndpoint+0x578>)
 8003170:	430b      	orrs	r3, r1
 8003172:	b29b      	uxth	r3, r3
 8003174:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <USB_ActivateEndpoint+0x3e4>
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29a      	uxth	r2, r3
 800319a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800319e:	4013      	ands	r3, r2
 80031a0:	b299      	uxth	r1, r3
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	441a      	add	r2, r3
 80031ac:	4b67      	ldr	r3, [pc, #412]	; (800334c <USB_ActivateEndpoint+0x57c>)
 80031ae:	430b      	orrs	r3, r1
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80031c6:	4013      	ands	r3, r2
 80031c8:	b299      	uxth	r1, r3
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	441a      	add	r2, r3
 80031d4:	4b5d      	ldr	r3, [pc, #372]	; (800334c <USB_ActivateEndpoint+0x57c>)
 80031d6:	430b      	orrs	r3, r1
 80031d8:	b29b      	uxth	r3, r3
 80031da:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	b29c      	uxth	r4, r3
 80031f4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031f8:	b29c      	uxth	r4, r3
 80031fa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80031fe:	b29c      	uxth	r4, r3
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	441a      	add	r2, r3
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <USB_ActivateEndpoint+0x580>)
 800320c:	4323      	orrs	r3, r4
 800320e:	b29b      	uxth	r3, r3
 8003210:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003228:	b29c      	uxth	r4, r3
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	441a      	add	r2, r3
 8003234:	4b46      	ldr	r3, [pc, #280]	; (8003350 <USB_ActivateEndpoint+0x580>)
 8003236:	4323      	orrs	r3, r4
 8003238:	b29b      	uxth	r3, r3
 800323a:	8013      	strh	r3, [r2, #0]
 800323c:	e07b      	b.n	8003336 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <USB_ActivateEndpoint+0x4ac>
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	b29a      	uxth	r2, r3
 8003262:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003266:	4013      	ands	r3, r2
 8003268:	b299      	uxth	r1, r3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	441a      	add	r2, r3
 8003274:	4b34      	ldr	r3, [pc, #208]	; (8003348 <USB_ActivateEndpoint+0x578>)
 8003276:	430b      	orrs	r3, r1
 8003278:	b29b      	uxth	r3, r3
 800327a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d013      	beq.n	80032ba <USB_ActivateEndpoint+0x4ea>
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80032a4:	4013      	ands	r3, r2
 80032a6:	b299      	uxth	r1, r3
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <USB_ActivateEndpoint+0x57c>)
 80032b4:	430b      	orrs	r3, r1
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80032cc:	4013      	ands	r3, r2
 80032ce:	b299      	uxth	r1, r3
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	441a      	add	r2, r3
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <USB_ActivateEndpoint+0x578>)
 80032dc:	430b      	orrs	r3, r1
 80032de:	b29b      	uxth	r3, r3
 80032e0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f8:	b29c      	uxth	r4, r3
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	441a      	add	r2, r3
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <USB_ActivateEndpoint+0x580>)
 8003306:	4323      	orrs	r3, r4
 8003308:	b29b      	uxth	r3, r3
 800330a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003322:	b29c      	uxth	r4, r3
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	441a      	add	r2, r3
 800332e:	4b08      	ldr	r3, [pc, #32]	; (8003350 <USB_ActivateEndpoint+0x580>)
 8003330:	4323      	orrs	r3, r4
 8003332:	b29b      	uxth	r3, r3
 8003334:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bc90      	pop	{r4, r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	ffff8180 	.word	0xffff8180
 8003348:	ffffc080 	.word	0xffffc080
 800334c:	ffff80c0 	.word	0xffff80c0
 8003350:	ffff8080 	.word	0xffff8080

08003354 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003354:	b490      	push	{r4, r7}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	7a9b      	ldrb	r3, [r3, #10]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d16d      	bne.n	8003442 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	785b      	ldrb	r3, [r3, #1]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d034      	beq.n	80033d8 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <USB_DeactivateEndpoint+0x58>
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29a      	uxth	r2, r3
 8003392:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003396:	4013      	ands	r3, r2
 8003398:	b299      	uxth	r1, r3
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	4b68      	ldr	r3, [pc, #416]	; (8003548 <USB_DeactivateEndpoint+0x1f4>)
 80033a6:	430b      	orrs	r3, r1
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c2:	b29c      	uxth	r4, r3
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	441a      	add	r2, r3
 80033ce:	4b5f      	ldr	r3, [pc, #380]	; (800354c <USB_DeactivateEndpoint+0x1f8>)
 80033d0:	4323      	orrs	r3, r4
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	8013      	strh	r3, [r2, #0]
 80033d6:	e139      	b.n	800364c <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d013      	beq.n	8003416 <USB_DeactivateEndpoint+0xc2>
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003400:	4013      	ands	r3, r2
 8003402:	b299      	uxth	r1, r3
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	4b50      	ldr	r3, [pc, #320]	; (8003550 <USB_DeactivateEndpoint+0x1fc>)
 8003410:	430b      	orrs	r3, r1
 8003412:	b29b      	uxth	r3, r3
 8003414:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342c:	b29c      	uxth	r4, r3
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	441a      	add	r2, r3
 8003438:	4b44      	ldr	r3, [pc, #272]	; (800354c <USB_DeactivateEndpoint+0x1f8>)
 800343a:	4323      	orrs	r3, r4
 800343c:	b29b      	uxth	r3, r3
 800343e:	8013      	strh	r3, [r2, #0]
 8003440:	e104      	b.n	800364c <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 8084 	bne.w	8003554 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d013      	beq.n	800348a <USB_DeactivateEndpoint+0x136>
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29a      	uxth	r2, r3
 8003470:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003474:	4013      	ands	r3, r2
 8003476:	b299      	uxth	r1, r3
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	441a      	add	r2, r3
 8003482:	4b33      	ldr	r3, [pc, #204]	; (8003550 <USB_DeactivateEndpoint+0x1fc>)
 8003484:	430b      	orrs	r3, r1
 8003486:	b29b      	uxth	r3, r3
 8003488:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <USB_DeactivateEndpoint+0x174>
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	f640 730f 	movw	r3, #3855	; 0xf0f
 80034b2:	4013      	ands	r3, r2
 80034b4:	b299      	uxth	r1, r3
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	441a      	add	r2, r3
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <USB_DeactivateEndpoint+0x1f4>)
 80034c2:	430b      	orrs	r3, r1
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80034da:	4013      	ands	r3, r2
 80034dc:	b299      	uxth	r1, r3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	441a      	add	r2, r3
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <USB_DeactivateEndpoint+0x1f4>)
 80034ea:	430b      	orrs	r3, r1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	b29c      	uxth	r4, r3
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <USB_DeactivateEndpoint+0x1f8>)
 8003514:	4323      	orrs	r3, r4
 8003516:	b29b      	uxth	r3, r3
 8003518:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003530:	b29c      	uxth	r4, r3
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	441a      	add	r2, r3
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <USB_DeactivateEndpoint+0x1f8>)
 800353e:	4323      	orrs	r3, r4
 8003540:	b29b      	uxth	r3, r3
 8003542:	8013      	strh	r3, [r2, #0]
 8003544:	e082      	b.n	800364c <USB_DeactivateEndpoint+0x2f8>
 8003546:	bf00      	nop
 8003548:	ffff80c0 	.word	0xffff80c0
 800354c:	ffff8080 	.word	0xffff8080
 8003550:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d013      	beq.n	8003592 <USB_DeactivateEndpoint+0x23e>
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	b29a      	uxth	r2, r3
 8003578:	f640 730f 	movw	r3, #3855	; 0xf0f
 800357c:	4013      	ands	r3, r2
 800357e:	b299      	uxth	r1, r3
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	4b33      	ldr	r3, [pc, #204]	; (8003658 <USB_DeactivateEndpoint+0x304>)
 800358c:	430b      	orrs	r3, r1
 800358e:	b29b      	uxth	r3, r3
 8003590:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <USB_DeactivateEndpoint+0x27c>
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80035ba:	4013      	ands	r3, r2
 80035bc:	b299      	uxth	r1, r3
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	441a      	add	r2, r3
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <USB_DeactivateEndpoint+0x308>)
 80035ca:	430b      	orrs	r3, r1
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29a      	uxth	r2, r3
 80035de:	f640 730f 	movw	r3, #3855	; 0xf0f
 80035e2:	4013      	ands	r3, r2
 80035e4:	b299      	uxth	r1, r3
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	441a      	add	r2, r3
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <USB_DeactivateEndpoint+0x304>)
 80035f2:	430b      	orrs	r3, r1
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800360e:	b29c      	uxth	r4, r3
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	441a      	add	r2, r3
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <USB_DeactivateEndpoint+0x30c>)
 800361c:	4323      	orrs	r3, r4
 800361e:	b29b      	uxth	r3, r3
 8003620:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003638:	b29c      	uxth	r4, r3
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	441a      	add	r2, r3
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <USB_DeactivateEndpoint+0x30c>)
 8003646:	4323      	orrs	r3, r4
 8003648:	b29b      	uxth	r3, r3
 800364a:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bc90      	pop	{r4, r7}
 8003656:	4770      	bx	lr
 8003658:	ffffc080 	.word	0xffffc080
 800365c:	ffff80c0 	.word	0xffff80c0
 8003660:	ffff8080 	.word	0xffff8080

08003664 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b08d      	sub	sp, #52	; 0x34
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	785b      	ldrb	r3, [r3, #1]
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 8149 	bne.w	8003914 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	429a      	cmp	r2, r3
 800368c:	d909      	bls.n	80036a2 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	699a      	ldr	r2, [r3, #24]
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	1ad2      	subs	r2, r2, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	619a      	str	r2, [r3, #24]
 80036a0:	e005      	b.n	80036ae <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	7a9b      	ldrb	r3, [r3, #10]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11b      	bne.n	80036ee <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6959      	ldr	r1, [r3, #20]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	889a      	ldrh	r2, [r3, #4]
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fb7d 	bl	8003dc2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	3302      	adds	r3, #2
 80036dc:	005a      	lsls	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036e6:	461a      	mov	r2, r3
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	e0f6      	b.n	80038dc <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d059      	beq.n	80037b8 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d13b      	bne.n	8003784 <USB_EPStartXfer+0x120>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	3306      	adds	r3, #6
 8003720:	005a      	lsls	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	2b3e      	cmp	r3, #62	; 0x3e
 8003730:	d916      	bls.n	8003760 <USB_EPStartXfer+0xfc>
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <USB_EPStartXfer+0xe4>
 8003742:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003744:	3b01      	subs	r3, #1
 8003746:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003748:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800374a:	029b      	lsls	r3, r3, #10
 800374c:	b29b      	uxth	r3, r3
 800374e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003756:	b29b      	uxth	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e027      	b.n	80037b0 <USB_EPStartXfer+0x14c>
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <USB_EPStartXfer+0x112>
 8003770:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003772:	3301      	adds	r3, #1
 8003774:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003776:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003778:	029b      	lsls	r3, r3, #10
 800377a:	b29b      	uxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e015      	b.n	80037b0 <USB_EPStartXfer+0x14c>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	785b      	ldrb	r3, [r3, #1]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d111      	bne.n	80037b0 <USB_EPStartXfer+0x14c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003792:	b29b      	uxth	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	3302      	adds	r3, #2
 80037a0:	005a      	lsls	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037aa:	461a      	mov	r2, r3
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	891b      	ldrh	r3, [r3, #8]
 80037b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80037b6:	e058      	b.n	800386a <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d13b      	bne.n	8003838 <USB_EPStartXfer+0x1d4>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	3302      	adds	r3, #2
 80037d4:	005a      	lsls	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	2b3e      	cmp	r3, #62	; 0x3e
 80037e4:	d916      	bls.n	8003814 <USB_EPStartXfer+0x1b0>
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <USB_EPStartXfer+0x198>
 80037f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037f8:	3b01      	subs	r3, #1
 80037fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037fe:	029b      	lsls	r3, r3, #10
 8003800:	b29b      	uxth	r3, r3
 8003802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e027      	b.n	8003864 <USB_EPStartXfer+0x200>
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	84bb      	strh	r3, [r7, #36]	; 0x24
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <USB_EPStartXfer+0x1c6>
 8003824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003826:	3301      	adds	r3, #1
 8003828:	84bb      	strh	r3, [r7, #36]	; 0x24
 800382a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800382c:	029b      	lsls	r3, r3, #10
 800382e:	b29b      	uxth	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e015      	b.n	8003864 <USB_EPStartXfer+0x200>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d111      	bne.n	8003864 <USB_EPStartXfer+0x200>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003846:	b29b      	uxth	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	3302      	adds	r3, #2
 8003854:	005a      	lsls	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800385e:	461a      	mov	r2, r3
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	88db      	ldrh	r3, [r3, #6]
 8003868:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6959      	ldr	r1, [r3, #20]
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	b29b      	uxth	r3, r3
 8003872:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 faa4 	bl	8003dc2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d114      	bne.n	80038ac <USB_EPStartXfer+0x248>
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29a      	uxth	r2, r3
 8003890:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003894:	4013      	ands	r3, r2
 8003896:	b299      	uxth	r1, r3
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	441a      	add	r2, r3
 80038a2:	4b92      	ldr	r3, [pc, #584]	; (8003aec <USB_EPStartXfer+0x488>)
 80038a4:	430b      	orrs	r3, r1
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	8013      	strh	r3, [r2, #0]
 80038aa:	e017      	b.n	80038dc <USB_EPStartXfer+0x278>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	785b      	ldrb	r3, [r3, #1]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d113      	bne.n	80038dc <USB_EPStartXfer+0x278>
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80038c6:	4013      	ands	r3, r2
 80038c8:	b299      	uxth	r1, r3
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	441a      	add	r2, r3
 80038d4:	4b86      	ldr	r3, [pc, #536]	; (8003af0 <USB_EPStartXfer+0x48c>)
 80038d6:	430b      	orrs	r3, r1
 80038d8:	b29b      	uxth	r3, r3
 80038da:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f2:	b29c      	uxth	r4, r3
 80038f4:	f084 0310 	eor.w	r3, r4, #16
 80038f8:	b29c      	uxth	r4, r3
 80038fa:	f084 0320 	eor.w	r3, r4, #32
 80038fe:	b29c      	uxth	r4, r3
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	4b7a      	ldr	r3, [pc, #488]	; (8003af4 <USB_EPStartXfer+0x490>)
 800390c:	4323      	orrs	r3, r4
 800390e:	b29b      	uxth	r3, r3
 8003910:	8013      	strh	r3, [r2, #0]
 8003912:	e122      	b.n	8003b5a <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	429a      	cmp	r2, r3
 800391e:	d909      	bls.n	8003934 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	1ad2      	subs	r2, r2, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	619a      	str	r2, [r3, #24]
 8003932:	e005      	b.n	8003940 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2200      	movs	r2, #0
 800393e:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	7a9b      	ldrb	r3, [r3, #10]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d13b      	bne.n	80039c0 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	3306      	adds	r3, #6
 800395c:	005a      	lsls	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	2b3e      	cmp	r3, #62	; 0x3e
 800396c:	d916      	bls.n	800399c <USB_EPStartXfer+0x338>
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	847b      	strh	r3, [r7, #34]	; 0x22
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <USB_EPStartXfer+0x320>
 800397e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003980:	3b01      	subs	r3, #1
 8003982:	847b      	strh	r3, [r7, #34]	; 0x22
 8003984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003986:	029b      	lsls	r3, r3, #10
 8003988:	b29b      	uxth	r3, r3
 800398a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800398e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003992:	b29b      	uxth	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e0c3      	b.n	8003b24 <USB_EPStartXfer+0x4c0>
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	847b      	strh	r3, [r7, #34]	; 0x22
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <USB_EPStartXfer+0x34e>
 80039ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039ae:	3301      	adds	r3, #1
 80039b0:	847b      	strh	r3, [r7, #34]	; 0x22
 80039b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039b4:	029b      	lsls	r3, r3, #10
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e0b1      	b.n	8003b24 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	785b      	ldrb	r3, [r3, #1]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d13b      	bne.n	8003a40 <USB_EPStartXfer+0x3dc>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	3302      	adds	r3, #2
 80039dc:	005a      	lsls	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	2b3e      	cmp	r3, #62	; 0x3e
 80039ec:	d916      	bls.n	8003a1c <USB_EPStartXfer+0x3b8>
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	843b      	strh	r3, [r7, #32]
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <USB_EPStartXfer+0x3a0>
 80039fe:	8c3b      	ldrh	r3, [r7, #32]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	843b      	strh	r3, [r7, #32]
 8003a04:	8c3b      	ldrh	r3, [r7, #32]
 8003a06:	029b      	lsls	r3, r3, #10
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e027      	b.n	8003a6c <USB_EPStartXfer+0x408>
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	843b      	strh	r3, [r7, #32]
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <USB_EPStartXfer+0x3ce>
 8003a2c:	8c3b      	ldrh	r3, [r7, #32]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	843b      	strh	r3, [r7, #32]
 8003a32:	8c3b      	ldrh	r3, [r7, #32]
 8003a34:	029b      	lsls	r3, r3, #10
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e015      	b.n	8003a6c <USB_EPStartXfer+0x408>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	785b      	ldrb	r3, [r3, #1]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d111      	bne.n	8003a6c <USB_EPStartXfer+0x408>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	005a      	lsls	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a66:	461a      	mov	r2, r3
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	785b      	ldrb	r3, [r3, #1]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d141      	bne.n	8003af8 <USB_EPStartXfer+0x494>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	3306      	adds	r3, #6
 8003a88:	005a      	lsls	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	2b3e      	cmp	r3, #62	; 0x3e
 8003a98:	d916      	bls.n	8003ac8 <USB_EPStartXfer+0x464>
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	83fb      	strh	r3, [r7, #30]
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <USB_EPStartXfer+0x44c>
 8003aaa:	8bfb      	ldrh	r3, [r7, #30]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	83fb      	strh	r3, [r7, #30]
 8003ab0:	8bfb      	ldrh	r3, [r7, #30]
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e02d      	b.n	8003b24 <USB_EPStartXfer+0x4c0>
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	085b      	lsrs	r3, r3, #1
 8003acc:	83fb      	strh	r3, [r7, #30]
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <USB_EPStartXfer+0x47a>
 8003ad8:	8bfb      	ldrh	r3, [r7, #30]
 8003ada:	3301      	adds	r3, #1
 8003adc:	83fb      	strh	r3, [r7, #30]
 8003ade:	8bfb      	ldrh	r3, [r7, #30]
 8003ae0:	029b      	lsls	r3, r3, #10
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e01b      	b.n	8003b24 <USB_EPStartXfer+0x4c0>
 8003aec:	ffff80c0 	.word	0xffff80c0
 8003af0:	ffffc080 	.word	0xffffc080
 8003af4:	ffff8080 	.word	0xffff8080
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d111      	bne.n	8003b24 <USB_EPStartXfer+0x4c0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	3302      	adds	r3, #2
 8003b14:	005a      	lsls	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	b29c      	uxth	r4, r3
 8003b3c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003b40:	b29c      	uxth	r4, r3
 8003b42:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003b46:	b29c      	uxth	r4, r3
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <USB_EPStartXfer+0x500>)
 8003b54:	4323      	orrs	r3, r4
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3734      	adds	r7, #52	; 0x34
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd90      	pop	{r4, r7, pc}
 8003b64:	ffff8080 	.word	0xffff8080

08003b68 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003b68:	b490      	push	{r4, r7}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d118      	bne.n	8003bac <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8003b8c:	401c      	ands	r4, r3
 8003b8e:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8003b92:	f084 0410 	eor.w	r4, r4, #16
 8003b96:	b2a1      	uxth	r1, r4
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	441a      	add	r2, r3
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <USB_EPSetStall+0xbc>)
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	8013      	strh	r3, [r2, #0]
 8003baa:	e034      	b.n	8003c16 <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d018      	beq.n	8003be6 <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bca:	b29c      	uxth	r4, r3
 8003bcc:	f084 0310 	eor.w	r3, r4, #16
 8003bd0:	b29c      	uxth	r4, r3
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	441a      	add	r2, r3
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <USB_EPSetStall+0xbc>)
 8003bde:	4323      	orrs	r3, r4
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	8013      	strh	r3, [r2, #0]
 8003be4:	e017      	b.n	8003c16 <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfc:	b29c      	uxth	r4, r3
 8003bfe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c02:	b29c      	uxth	r4, r3
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	441a      	add	r2, r3
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <USB_EPSetStall+0xbc>)
 8003c10:	4323      	orrs	r3, r4
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc90      	pop	{r4, r7}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	ffff8080 	.word	0xffff8080

08003c28 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c28:	b490      	push	{r4, r7}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d03a      	beq.n	8003cb0 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <USB_EPClearStall+0x50>
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003c62:	4013      	ands	r3, r2
 8003c64:	b299      	uxth	r1, r3
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	441a      	add	r2, r3
 8003c70:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <USB_EPClearStall+0x108>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8e:	b29c      	uxth	r4, r3
 8003c90:	f084 0310 	eor.w	r3, r4, #16
 8003c94:	b29c      	uxth	r4, r3
 8003c96:	f084 0320 	eor.w	r3, r4, #32
 8003c9a:	b29c      	uxth	r4, r3
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <USB_EPClearStall+0x10c>)
 8003ca8:	4323      	orrs	r3, r4
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	8013      	strh	r3, [r2, #0]
 8003cae:	e039      	b.n	8003d24 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d013      	beq.n	8003cee <USB_EPClearStall+0xc6>
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b299      	uxth	r1, r3
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	441a      	add	r2, r3
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <USB_EPClearStall+0x110>)
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d04:	b29c      	uxth	r4, r3
 8003d06:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d0a:	b29c      	uxth	r4, r3
 8003d0c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d10:	b29c      	uxth	r4, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	441a      	add	r2, r3
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <USB_EPClearStall+0x10c>)
 8003d1e:	4323      	orrs	r3, r4
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc90      	pop	{r4, r7}
 8003d2e:	4770      	bx	lr
 8003d30:	ffff80c0 	.word	0xffff80c0
 8003d34:	ffff8080 	.word	0xffff8080
 8003d38:	ffffc080 	.word	0xffffc080

08003d3c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d103      	bne.n	8003d56 <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003da0:	68fb      	ldr	r3, [r7, #12]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b08b      	sub	sp, #44	; 0x2c
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	4611      	mov	r1, r2
 8003dce:	461a      	mov	r2, r3
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	80fb      	strh	r3, [r7, #6]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8003dd8:	88bb      	ldrh	r3, [r7, #4]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	105b      	asrs	r3, r3, #1
 8003dde:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	461a      	mov	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dfe:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
 8003e04:	e01b      	b.n	8003e3e <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	461a      	mov	r2, r3
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	623a      	str	r2, [r7, #32]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	b292      	uxth	r2, r2
 8003e2a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	3302      	adds	r3, #2
 8003e30:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e0      	bne.n	8003e06 <USB_WritePMA+0x44>
  }
}
 8003e44:	bf00      	nop
 8003e46:	372c      	adds	r7, #44	; 0x2c
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b089      	sub	sp, #36	; 0x24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	80fb      	strh	r3, [r7, #6]
 8003e60:	4613      	mov	r3, r2
 8003e62:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8003e64:	88bb      	ldrh	r3, [r7, #4]
 8003e66:	3301      	adds	r3, #1
 8003e68:	105b      	asrs	r3, r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e82:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	e00e      	b.n	8003ea8 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	1d1a      	adds	r2, r3, #4
 8003e8e:	61ba      	str	r2, [r7, #24]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	60ba      	str	r2, [r7, #8]
 8003e98:	b28a      	uxth	r2, r1
 8003e9a:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ed      	bne.n	8003e8a <USB_ReadPMA+0x3c>
  }
}
 8003eae:	bf00      	nop
 8003eb0:	3724      	adds	r7, #36	; 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	7c1b      	ldrb	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10e      	bne.n	8003eee <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	2181      	movs	r1, #129	; 0x81
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f002 ffd8 	bl	8006e8e <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f002 ffd1 	bl	8006e8e <USBD_LL_OpenEP>
 8003eec:	e00b      	b.n	8003f06 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003eee:	2340      	movs	r3, #64	; 0x40
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	2181      	movs	r1, #129	; 0x81
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f002 ffca 	bl	8006e8e <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003efa:	2340      	movs	r3, #64	; 0x40
 8003efc:	2202      	movs	r2, #2
 8003efe:	2101      	movs	r1, #1
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f002 ffc4 	bl	8006e8e <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8003f06:	2308      	movs	r3, #8
 8003f08:	2203      	movs	r2, #3
 8003f0a:	2182      	movs	r1, #130	; 0x82
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f002 ffbe 	bl	8006e8e <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003f12:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003f16:	f003 f8db 	bl	80070d0 <USBD_static_malloc>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
 8003f30:	e026      	b.n	8003f80 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f38:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7c1b      	ldrb	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f66:	2101      	movs	r1, #1
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f003 f87a 	bl	8007062 <USBD_LL_PrepareReceive>
 8003f6e:	e007      	b.n	8003f80 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f76:	2340      	movs	r3, #64	; 0x40
 8003f78:	2101      	movs	r1, #1
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f003 f871 	bl	8007062 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8003f9a:	2181      	movs	r1, #129	; 0x81
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f002 ff9c 	bl	8006eda <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f002 ff98 	bl	8006eda <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8003faa:	2182      	movs	r1, #130	; 0x82
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f002 ff94 	bl	8006eda <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f003 f88b 	bl	80070e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003ff4:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d03a      	beq.n	8004078 <USBD_CDC_Setup+0x94>
 8004002:	2b20      	cmp	r3, #32
 8004004:	d000      	beq.n	8004008 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8004006:	e043      	b.n	8004090 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	88db      	ldrh	r3, [r3, #6]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d029      	beq.n	8004064 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b25b      	sxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	da11      	bge.n	800403e <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004026:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	88d2      	ldrh	r2, [r2, #6]
 800402c:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800402e:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	88db      	ldrh	r3, [r3, #6]
 8004034:	461a      	mov	r2, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 ffe4 	bl	8005004 <USBD_CtlSendData>
    break;
 800403c:	e029      	b.n	8004092 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	785a      	ldrb	r2, [r3, #1]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	88db      	ldrh	r3, [r3, #6]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8004054:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	88db      	ldrh	r3, [r3, #6]
 800405a:	461a      	mov	r2, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 ffff 	bl	8005060 <USBD_CtlPrepareRx>
    break;
 8004062:	e016      	b.n	8004092 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	7850      	ldrb	r0, [r2, #1]
 8004070:	2200      	movs	r2, #0
 8004072:	6839      	ldr	r1, [r7, #0]
 8004074:	4798      	blx	r3
    break;
 8004076:	e00c      	b.n	8004092 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	2b0a      	cmp	r3, #10
 800407e:	d001      	beq.n	8004084 <USBD_CDC_Setup+0xa0>
 8004080:	2b0b      	cmp	r3, #11
      break;
 8004082:	e005      	b.n	8004090 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8004084:	2201      	movs	r2, #1
 8004086:	4905      	ldr	r1, [pc, #20]	; (800409c <USBD_CDC_Setup+0xb8>)
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 ffbb 	bl	8005004 <USBD_CtlSendData>
      break;
 800408e:	bf00      	nop
    break;
 8004090:	bf00      	nop
  }
  return USBD_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	2000019c 	.word	0x2000019c

080040a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040b2:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 80040ca:	2302      	movs	r3, #2
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040e8:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f002 ffda 	bl	80070a8 <USBD_LL_GetRxDataSize>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00d      	beq.n	8004122 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800411a:	4611      	mov	r1, r2
 800411c:	4798      	blx	r3

    return USBD_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004122:	2302      	movs	r3, #2
  }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800413a:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d015      	beq.n	8004172 <USBD_CDC_EP0_RxReady+0x46>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800414c:	2bff      	cmp	r3, #255	; 0xff
 800414e:	d010      	beq.n	8004172 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800415e:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004166:	b292      	uxth	r2, r2
 8004168:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2243      	movs	r2, #67	; 0x43
 8004188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800418a:	4b03      	ldr	r3, [pc, #12]	; (8004198 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000090 	.word	0x20000090

0800419c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2243      	movs	r2, #67	; 0x43
 80041a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80041aa:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	2000004c 	.word	0x2000004c

080041bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2243      	movs	r2, #67	; 0x43
 80041c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80041ca:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	200000d4 	.word	0x200000d4

080041dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	220a      	movs	r2, #10
 80041e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80041ea:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000008 	.word	0x20000008

080041fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004206:	2302      	movs	r3, #2
 8004208:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	4613      	mov	r3, r2
 8004234:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800423c:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800426a:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800428e:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004296:	2b00      	cmp	r3, #0
 8004298:	d017      	beq.n	80042ca <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7c1b      	ldrb	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ac:	2101      	movs	r1, #1
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f002 fed7 	bl	8007062 <USBD_LL_PrepareReceive>
 80042b4:	e007      	b.n	80042c6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042bc:	2340      	movs	r3, #64	; 0x40
 80042be:	2101      	movs	r1, #1
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f002 fece 	bl	8007062 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e000      	b.n	80042cc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80042ca:	2302      	movs	r3, #2
  }
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80042e8:	2302      	movs	r3, #2
 80042ea:	e01a      	b.n	8004322 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	79fa      	ldrb	r2, [r7, #7]
 8004318:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f002 fd42 	bl	8006da4 <USBD_LL_Init>
  
  return USBD_OK; 
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800432a:	b480      	push	{r7}
 800432c:	b085      	sub	sp, #20
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d006      	beq.n	800434c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]
 800434a:	e001      	b.n	8004350 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800434c:	2302      	movs	r3, #2
 800434e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f002 fd77 	bl	8006e58 <USBD_LL_Start>
  
  return USBD_OK;  
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004394:	2302      	movs	r3, #2
 8004396:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00c      	beq.n	80043bc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	4611      	mov	r1, r2
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	78fa      	ldrb	r2, [r7, #3]
 80043dc:	4611      	mov	r1, r2
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
  return USBD_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fd59 	bl	8004eb6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004412:	461a      	mov	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	2b01      	cmp	r3, #1
 8004426:	d00b      	beq.n	8004440 <USBD_LL_SetupStage+0x54>
 8004428:	2b02      	cmp	r3, #2
 800442a:	d011      	beq.n	8004450 <USBD_LL_SetupStage+0x64>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d117      	bne.n	8004460 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f987 	bl	800474c <USBD_StdDevReq>
    break;
 800443e:	e01a      	b.n	8004476 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f9cf 	bl	80047ec <USBD_StdItfReq>
    break;
 800444e:	e012      	b.n	8004476 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f9fa 	bl	8004852 <USBD_StdEPReq>
    break;
 800445e:	e00a      	b.n	8004476 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004466:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f002 fd52 	bl	8006f18 <USBD_LL_StallEP>
    break;
 8004474:	bf00      	nop
  }  
  return USBD_OK;  
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	460b      	mov	r3, r1
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800448e:	7afb      	ldrb	r3, [r7, #11]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d138      	bne.n	8004506 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800449a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d142      	bne.n	800452c <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d914      	bls.n	80044dc <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	1ad2      	subs	r2, r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4293      	cmp	r3, r2
 80044ca:	bf28      	it	cs
 80044cc:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fde1 	bl	800509c <USBD_CtlContinueRx>
 80044da:	e027      	b.n	800452c <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d105      	bne.n	80044fe <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fdde 	bl	80050c0 <USBD_CtlSendStatus>
 8004504:	e012      	b.n	800452c <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00c      	beq.n	800452c <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8004518:	2b03      	cmp	r3, #3
 800451a:	d107      	bne.n	800452c <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	7afa      	ldrb	r2, [r7, #11]
 8004526:	4611      	mov	r1, r2
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	4798      	blx	r3
  }  
  return USBD_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	460b      	mov	r3, r1
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004544:	7afb      	ldrb	r3, [r7, #11]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d16c      	bne.n	8004624 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3314      	adds	r3, #20
 800454e:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004556:	2b02      	cmp	r3, #2
 8004558:	d157      	bne.n	800460a <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	429a      	cmp	r2, r3
 8004564:	d915      	bls.n	8004592 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	1ad2      	subs	r2, r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004578:	b29b      	uxth	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fd5c 	bl	800503c <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004584:	2300      	movs	r3, #0
 8004586:	2200      	movs	r2, #0
 8004588:	2100      	movs	r1, #0
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f002 fd69 	bl	8007062 <USBD_LL_PrepareReceive>
 8004590:	e03b      	b.n	800460a <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	68d2      	ldr	r2, [r2, #12]
 800459a:	fbb3 f1f2 	udiv	r1, r3, r2
 800459e:	fb02 f201 	mul.w	r2, r2, r1
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d11c      	bne.n	80045e2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d316      	bcc.n	80045e2 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 80045be:	429a      	cmp	r2, r3
 80045c0:	d20f      	bcs.n	80045e2 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80045c2:	2200      	movs	r2, #0
 80045c4:	2100      	movs	r1, #0
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fd38 	bl	800503c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80045d4:	2300      	movs	r3, #0
 80045d6:	2200      	movs	r2, #0
 80045d8:	2100      	movs	r1, #0
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f002 fd41 	bl	8007062 <USBD_LL_PrepareReceive>
 80045e0:	e013      	b.n	800460a <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d105      	bne.n	8004604 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fd6e 	bl	80050e6 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004610:	2b01      	cmp	r3, #1
 8004612:	d11a      	bne.n	800464a <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff fead 	bl	8004374 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004622:	e012      	b.n	800464a <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004636:	2b03      	cmp	r3, #3
 8004638:	d107      	bne.n	800464a <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	7afa      	ldrb	r2, [r7, #11]
 8004644:	4611      	mov	r1, r2
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	4798      	blx	r3
  }  
  return USBD_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800465c:	2340      	movs	r3, #64	; 0x40
 800465e:	2200      	movs	r2, #0
 8004660:	2100      	movs	r1, #0
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f002 fc13 	bl	8006e8e <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2240      	movs	r2, #64	; 0x40
 800466c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004670:	2340      	movs	r3, #64	; 0x40
 8004672:	2200      	movs	r2, #0
 8004674:	2180      	movs	r1, #128	; 0x80
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f002 fc09 	bl	8006e8e <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2240      	movs	r2, #64	; 0x40
 8004680:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6852      	ldr	r2, [r2, #4]
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	4611      	mov	r1, r2
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	4798      	blx	r3
 
  
  return USBD_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2204      	movs	r2, #4
 80046e8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr

08004718 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004726:	2b03      	cmp	r3, #3
 8004728:	d10b      	bne.n	8004742 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	2b09      	cmp	r3, #9
 8004760:	d839      	bhi.n	80047d6 <USBD_StdDevReq+0x8a>
 8004762:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <USBD_StdDevReq+0x1c>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	080047b9 	.word	0x080047b9
 800476c:	080047cd 	.word	0x080047cd
 8004770:	080047d7 	.word	0x080047d7
 8004774:	080047c3 	.word	0x080047c3
 8004778:	080047d7 	.word	0x080047d7
 800477c:	0800479b 	.word	0x0800479b
 8004780:	08004791 	.word	0x08004791
 8004784:	080047d7 	.word	0x080047d7
 8004788:	080047af 	.word	0x080047af
 800478c:	080047a5 	.word	0x080047a5
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f936 	bl	8004a04 <USBD_GetDescriptor>
    break;
 8004798:	e022      	b.n	80047e0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fa25 	bl	8004bec <USBD_SetAddress>
    break;
 80047a2:	e01d      	b.n	80047e0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fa5e 	bl	8004c68 <USBD_SetConfig>
    break;
 80047ac:	e018      	b.n	80047e0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fae1 	bl	8004d78 <USBD_GetConfig>
    break;
 80047b6:	e013      	b.n	80047e0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80047b8:	6839      	ldr	r1, [r7, #0]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fb0e 	bl	8004ddc <USBD_GetStatus>
    break;
 80047c0:	e00e      	b.n	80047e0 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80047c2:	6839      	ldr	r1, [r7, #0]
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fb33 	bl	8004e30 <USBD_SetFeature>
    break;
 80047ca:	e009      	b.n	80047e0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fb49 	bl	8004e66 <USBD_ClrFeature>
    break;
 80047d4:	e004      	b.n	80047e0 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80047d6:	6839      	ldr	r1, [r7, #0]
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fba8 	bl	8004f2e <USBD_CtlError>
    break;
 80047de:	bf00      	nop
  }
  
  return ret;
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop

080047ec <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004800:	2b03      	cmp	r3, #3
 8004802:	d11b      	bne.n	800483c <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	889b      	ldrh	r3, [r3, #4]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	d811      	bhi.n	8004832 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	6839      	ldr	r1, [r7, #0]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	88db      	ldrh	r3, [r3, #6]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d110      	bne.n	8004846 <USBD_StdItfReq+0x5a>
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10d      	bne.n	8004846 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fc48 	bl	80050c0 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004830:	e009      	b.n	8004846 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fb7a 	bl	8004f2e <USBD_CtlError>
    break;
 800483a:	e004      	b.n	8004846 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fb75 	bl	8004f2e <USBD_CtlError>
    break;
 8004844:	e000      	b.n	8004848 <USBD_StdItfReq+0x5c>
    break;
 8004846:	bf00      	nop
  }
  return USBD_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	889b      	ldrh	r3, [r3, #4]
 8004864:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800486e:	2b20      	cmp	r3, #32
 8004870:	d108      	bne.n	8004884 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	6839      	ldr	r1, [r7, #0]
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4798      	blx	r3
    
    return USBD_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	e0ba      	b.n	80049fa <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d039      	beq.n	8004900 <USBD_StdEPReq+0xae>
 800488c:	2b03      	cmp	r3, #3
 800488e:	d002      	beq.n	8004896 <USBD_StdEPReq+0x44>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d06b      	beq.n	800496c <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8004894:	e0b0      	b.n	80049f8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800489c:	2b02      	cmp	r3, #2
 800489e:	d002      	beq.n	80048a6 <USBD_StdEPReq+0x54>
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d00c      	beq.n	80048be <USBD_StdEPReq+0x6c>
 80048a4:	e025      	b.n	80048f2 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80048a6:	7bbb      	ldrb	r3, [r7, #14]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d027      	beq.n	80048fc <USBD_StdEPReq+0xaa>
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
 80048ae:	2b80      	cmp	r3, #128	; 0x80
 80048b0:	d024      	beq.n	80048fc <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 80048b2:	7bbb      	ldrb	r3, [r7, #14]
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f002 fb2e 	bl	8006f18 <USBD_LL_StallEP>
      break;	
 80048bc:	e01e      	b.n	80048fc <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	885b      	ldrh	r3, [r3, #2]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80048c6:	7bbb      	ldrb	r3, [r7, #14]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <USBD_StdEPReq+0x8a>
 80048cc:	7bbb      	ldrb	r3, [r7, #14]
 80048ce:	2b80      	cmp	r3, #128	; 0x80
 80048d0:	d004      	beq.n	80048dc <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 80048d2:	7bbb      	ldrb	r3, [r7, #14]
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f002 fb1e 	bl	8006f18 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fbe8 	bl	80050c0 <USBD_CtlSendStatus>
      break;
 80048f0:	e005      	b.n	80048fe <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fb1a 	bl	8004f2e <USBD_CtlError>
      break;    
 80048fa:	e000      	b.n	80048fe <USBD_StdEPReq+0xac>
      break;	
 80048fc:	bf00      	nop
    break;
 80048fe:	e07b      	b.n	80049f8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004906:	2b02      	cmp	r3, #2
 8004908:	d002      	beq.n	8004910 <USBD_StdEPReq+0xbe>
 800490a:	2b03      	cmp	r3, #3
 800490c:	d00c      	beq.n	8004928 <USBD_StdEPReq+0xd6>
 800490e:	e024      	b.n	800495a <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004910:	7bbb      	ldrb	r3, [r7, #14]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d026      	beq.n	8004964 <USBD_StdEPReq+0x112>
 8004916:	7bbb      	ldrb	r3, [r7, #14]
 8004918:	2b80      	cmp	r3, #128	; 0x80
 800491a:	d023      	beq.n	8004964 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 800491c:	7bbb      	ldrb	r3, [r7, #14]
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f002 faf9 	bl	8006f18 <USBD_LL_StallEP>
      break;	
 8004926:	e01d      	b.n	8004964 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	885b      	ldrh	r3, [r3, #2]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11b      	bne.n	8004968 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8004930:	7bbb      	ldrb	r3, [r7, #14]
 8004932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800493a:	7bbb      	ldrb	r3, [r7, #14]
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f002 fb09 	bl	8006f56 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fbb4 	bl	80050c0 <USBD_CtlSendStatus>
      break;
 8004958:	e006      	b.n	8004968 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fae6 	bl	8004f2e <USBD_CtlError>
      break;    
 8004962:	e002      	b.n	800496a <USBD_StdEPReq+0x118>
      break;	
 8004964:	bf00      	nop
 8004966:	e047      	b.n	80049f8 <USBD_StdEPReq+0x1a6>
      break;
 8004968:	bf00      	nop
    break;
 800496a:	e045      	b.n	80049f8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004972:	2b02      	cmp	r3, #2
 8004974:	d002      	beq.n	800497c <USBD_StdEPReq+0x12a>
 8004976:	2b03      	cmp	r3, #3
 8004978:	d00b      	beq.n	8004992 <USBD_StdEPReq+0x140>
 800497a:	e036      	b.n	80049ea <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 800497c:	7bbb      	ldrb	r3, [r7, #14]
 800497e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004982:	2b00      	cmp	r3, #0
 8004984:	d036      	beq.n	80049f4 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8004986:	7bbb      	ldrb	r3, [r7, #14]
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f002 fac4 	bl	8006f18 <USBD_LL_StallEP>
      break;	
 8004990:	e030      	b.n	80049f4 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da08      	bge.n	80049ac <USBD_StdEPReq+0x15a>
 800499a:	7bbb      	ldrb	r3, [r7, #14]
 800499c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a0:	3301      	adds	r3, #1
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	3304      	adds	r3, #4
 80049aa:	e007      	b.n	80049bc <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80049ac:	7bbb      	ldrb	r3, [r7, #14]
 80049ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80049b2:	3310      	adds	r3, #16
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	4413      	add	r3, r2
 80049ba:	3304      	adds	r3, #4
 80049bc:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80049be:	7bbb      	ldrb	r3, [r7, #14]
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f002 fae6 	bl	8006f94 <USBD_LL_IsStallEP>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e002      	b.n	80049dc <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80049dc:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80049de:	2202      	movs	r2, #2
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fb0e 	bl	8005004 <USBD_CtlSendData>
      break;
 80049e8:	e005      	b.n	80049f6 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 80049ea:	6839      	ldr	r1, [r7, #0]
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fa9e 	bl	8004f2e <USBD_CtlError>
      break;
 80049f2:	e000      	b.n	80049f6 <USBD_StdEPReq+0x1a4>
      break;	
 80049f4:	bf00      	nop
    break;
 80049f6:	bf00      	nop
  }
  return ret;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	885b      	ldrh	r3, [r3, #2]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	2b06      	cmp	r3, #6
 8004a1a:	f200 80c9 	bhi.w	8004bb0 <USBD_GetDescriptor+0x1ac>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <USBD_GetDescriptor+0x20>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a41 	.word	0x08004a41
 8004a28:	08004a59 	.word	0x08004a59
 8004a2c:	08004a99 	.word	0x08004a99
 8004a30:	08004bb1 	.word	0x08004bb1
 8004a34:	08004bb1 	.word	0x08004bb1
 8004a38:	08004b5d 	.word	0x08004b5d
 8004a3c:	08004b83 	.word	0x08004b83
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	7c12      	ldrb	r2, [r2, #16]
 8004a4c:	f107 010a 	add.w	r1, r7, #10
 8004a50:	4610      	mov	r0, r2
 8004a52:	4798      	blx	r3
 8004a54:	60f8      	str	r0, [r7, #12]
    break;
 8004a56:	e0b0      	b.n	8004bba <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	7c1b      	ldrb	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10d      	bne.n	8004a7c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	f107 020a 	add.w	r2, r7, #10
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4798      	blx	r3
 8004a70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	2202      	movs	r2, #2
 8004a78:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004a7a:	e09e      	b.n	8004bba <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	f107 020a 	add.w	r2, r7, #10
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4798      	blx	r3
 8004a8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	2202      	movs	r2, #2
 8004a94:	701a      	strb	r2, [r3, #0]
    break;
 8004a96:	e090      	b.n	8004bba <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	885b      	ldrh	r3, [r3, #2]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d856      	bhi.n	8004b50 <USBD_GetDescriptor+0x14c>
 8004aa2:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <USBD_GetDescriptor+0xa4>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004ac1 	.word	0x08004ac1
 8004aac:	08004ad9 	.word	0x08004ad9
 8004ab0:	08004af1 	.word	0x08004af1
 8004ab4:	08004b09 	.word	0x08004b09
 8004ab8:	08004b21 	.word	0x08004b21
 8004abc:	08004b39 	.word	0x08004b39
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	7c12      	ldrb	r2, [r2, #16]
 8004acc:	f107 010a 	add.w	r1, r7, #10
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4798      	blx	r3
 8004ad4:	60f8      	str	r0, [r7, #12]
      break;
 8004ad6:	e040      	b.n	8004b5a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	7c12      	ldrb	r2, [r2, #16]
 8004ae4:	f107 010a 	add.w	r1, r7, #10
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4798      	blx	r3
 8004aec:	60f8      	str	r0, [r7, #12]
      break;
 8004aee:	e034      	b.n	8004b5a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	7c12      	ldrb	r2, [r2, #16]
 8004afc:	f107 010a 	add.w	r1, r7, #10
 8004b00:	4610      	mov	r0, r2
 8004b02:	4798      	blx	r3
 8004b04:	60f8      	str	r0, [r7, #12]
      break;
 8004b06:	e028      	b.n	8004b5a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	7c12      	ldrb	r2, [r2, #16]
 8004b14:	f107 010a 	add.w	r1, r7, #10
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4798      	blx	r3
 8004b1c:	60f8      	str	r0, [r7, #12]
      break;
 8004b1e:	e01c      	b.n	8004b5a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	7c12      	ldrb	r2, [r2, #16]
 8004b2c:	f107 010a 	add.w	r1, r7, #10
 8004b30:	4610      	mov	r0, r2
 8004b32:	4798      	blx	r3
 8004b34:	60f8      	str	r0, [r7, #12]
      break;
 8004b36:	e010      	b.n	8004b5a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	7c12      	ldrb	r2, [r2, #16]
 8004b44:	f107 010a 	add.w	r1, r7, #10
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4798      	blx	r3
 8004b4c:	60f8      	str	r0, [r7, #12]
      break;
 8004b4e:	e004      	b.n	8004b5a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f9eb 	bl	8004f2e <USBD_CtlError>
      return;
 8004b58:	e044      	b.n	8004be4 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8004b5a:	e02e      	b.n	8004bba <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7c1b      	ldrb	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d109      	bne.n	8004b78 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6c:	f107 020a 	add.w	r2, r7, #10
 8004b70:	4610      	mov	r0, r2
 8004b72:	4798      	blx	r3
 8004b74:	60f8      	str	r0, [r7, #12]
      break;
 8004b76:	e020      	b.n	8004bba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9d7 	bl	8004f2e <USBD_CtlError>
      return;
 8004b80:	e030      	b.n	8004be4 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	7c1b      	ldrb	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	f107 020a 	add.w	r2, r7, #10
 8004b96:	4610      	mov	r0, r2
 8004b98:	4798      	blx	r3
 8004b9a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	701a      	strb	r2, [r3, #0]
      break; 
 8004ba4:	e009      	b.n	8004bba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f9c0 	bl	8004f2e <USBD_CtlError>
      return;
 8004bae:	e019      	b.n	8004be4 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8004bb0:	6839      	ldr	r1, [r7, #0]
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9bb 	bl	8004f2e <USBD_CtlError>
    return;
 8004bb8:	e014      	b.n	8004be4 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8004bba:	897b      	ldrh	r3, [r7, #10]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d011      	beq.n	8004be4 <USBD_GetDescriptor+0x1e0>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	88db      	ldrh	r3, [r3, #6]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00d      	beq.n	8004be4 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	88da      	ldrh	r2, [r3, #6]
 8004bcc:	897b      	ldrh	r3, [r7, #10]
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	bf28      	it	cs
 8004bd2:	4613      	movcs	r3, r2
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8004bd8:	897b      	ldrh	r3, [r7, #10]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa10 	bl	8005004 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop

08004bec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	889b      	ldrh	r3, [r3, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d12c      	bne.n	8004c58 <USBD_SetAddress+0x6c>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	88db      	ldrh	r3, [r3, #6]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d128      	bne.n	8004c58 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	885b      	ldrh	r3, [r3, #2]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c10:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d104      	bne.n	8004c26 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f985 	bl	8004f2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004c24:	e01c      	b.n	8004c60 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f002 f9d3 	bl	8006fde <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fa41 	bl	80050c0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004c4c:	e008      	b.n	8004c60 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004c56:	e003      	b.n	8004c60 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8004c58:	6839      	ldr	r1, [r7, #0]
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f967 	bl	8004f2e <USBD_CtlError>
  } 
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	885b      	ldrh	r3, [r3, #2]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	4b3e      	ldr	r3, [pc, #248]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004c7a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004c7c:	4b3d      	ldr	r3, [pc, #244]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d904      	bls.n	8004c8e <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f951 	bl	8004f2e <USBD_CtlError>
 8004c8c:	e06f      	b.n	8004d6e <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d002      	beq.n	8004c9e <USBD_SetConfig+0x36>
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d023      	beq.n	8004ce4 <USBD_SetConfig+0x7c>
 8004c9c:	e062      	b.n	8004d64 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004c9e:	4b35      	ldr	r3, [pc, #212]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01a      	beq.n	8004cdc <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004ca6:	4b33      	ldr	r3, [pc, #204]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2203      	movs	r2, #3
 8004cb4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004cb8:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fb62 	bl	8004388 <USBD_SetClassConfig>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d104      	bne.n	8004cd4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f92e 	bl	8004f2e <USBD_CtlError>
          return;
 8004cd2:	e04c      	b.n	8004d6e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f9f3 	bl	80050c0 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8004cda:	e048      	b.n	8004d6e <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f9ef 	bl	80050c0 <USBD_CtlSendStatus>
      break;
 8004ce2:	e044      	b.n	8004d6e <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004ce4:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d112      	bne.n	8004d12 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004cf4:	4b1f      	ldr	r3, [pc, #124]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	4619      	mov	r1, r3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff fb5e 	bl	80043c6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f9d8 	bl	80050c0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004d10:	e02d      	b.n	8004d6e <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8004d12:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d01d      	beq.n	8004d5c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff fb4c 	bl	80043c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004d2e:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004d38:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <USBD_SetConfig+0x10c>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fb22 	bl	8004388 <USBD_SetClassConfig>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d104      	bne.n	8004d54 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f8ee 	bl	8004f2e <USBD_CtlError>
          return;
 8004d52:	e00c      	b.n	8004d6e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9b3 	bl	80050c0 <USBD_CtlSendStatus>
      break;
 8004d5a:	e008      	b.n	8004d6e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f9af 	bl	80050c0 <USBD_CtlSendStatus>
      break;
 8004d62:	e004      	b.n	8004d6e <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8004d64:	6839      	ldr	r1, [r7, #0]
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f8e1 	bl	8004f2e <USBD_CtlError>
      break;
 8004d6c:	bf00      	nop
    }
  }
}
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	2000019d 	.word	0x2000019d

08004d78 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	88db      	ldrh	r3, [r3, #6]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d004      	beq.n	8004d94 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f8ce 	bl	8004f2e <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004d92:	e01f      	b.n	8004dd4 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d002      	beq.n	8004da4 <USBD_GetConfig+0x2c>
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d00b      	beq.n	8004dba <USBD_GetConfig+0x42>
 8004da2:	e012      	b.n	8004dca <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8004dae:	2201      	movs	r2, #1
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f926 	bl	8005004 <USBD_CtlSendData>
      break;
 8004db8:	e00c      	b.n	8004dd4 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f91e 	bl	8005004 <USBD_CtlSendData>
      break;
 8004dc8:	e004      	b.n	8004dd4 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f8ae 	bl	8004f2e <USBD_CtlError>
      break;
 8004dd2:	bf00      	nop
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004dec:	3b02      	subs	r3, #2
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d815      	bhi.n	8004e1e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f043 0202 	orr.w	r2, r3, #2
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8004e12:	2202      	movs	r2, #2
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8f4 	bl	8005004 <USBD_CtlSendData>
                      2);
    break;
 8004e1c:	e004      	b.n	8004e28 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f884 	bl	8004f2e <USBD_CtlError>
    break;
 8004e26:	bf00      	nop
  }
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	885b      	ldrh	r3, [r3, #2]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10d      	bne.n	8004e5e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	6839      	ldr	r1, [r7, #0]
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f931 	bl	80050c0 <USBD_CtlSendStatus>
  }

}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e76:	3b02      	subs	r3, #2
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d812      	bhi.n	8004ea2 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	885b      	ldrh	r3, [r3, #2]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d113      	bne.n	8004eac <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f910 	bl	80050c0 <USBD_CtlSendStatus>
    }
    break;
 8004ea0:	e004      	b.n	8004eac <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f842 	bl	8004f2e <USBD_CtlError>
    break;
 8004eaa:	e000      	b.n	8004eae <USBD_ClrFeature+0x48>
    break;
 8004eac:	bf00      	nop
  }
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781a      	ldrb	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	785a      	ldrb	r2, [r3, #1]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	3303      	adds	r3, #3
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	3305      	adds	r3, #5
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	4413      	add	r3, r2
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	3306      	adds	r3, #6
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	3307      	adds	r3, #7
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	80da      	strh	r2, [r3, #6]

}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8004f38:	2180      	movs	r1, #128	; 0x80
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f001 ffec 	bl	8006f18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004f40:	2100      	movs	r1, #0
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 ffe8 	bl	8006f18 <USBD_LL_StallEP>
}
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d033      	beq.n	8004fce <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f835 	bl	8004fd6 <USBD_GetLen>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	3301      	adds	r3, #1
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	881a      	ldrh	r2, [r3, #0]
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	75f9      	strb	r1, [r7, #23]
 8004f84:	4619      	mov	r1, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	440b      	add	r3, r1
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	75fa      	strb	r2, [r7, #23]
 8004f94:	461a      	mov	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4413      	add	r3, r2
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8004f9e:	e012      	b.n	8004fc6 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	60fa      	str	r2, [r7, #12]
 8004fa6:	7dfa      	ldrb	r2, [r7, #23]
 8004fa8:	1c51      	adds	r1, r2, #1
 8004faa:	75f9      	strb	r1, [r7, #23]
 8004fac:	4611      	mov	r1, r2
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	75fa      	strb	r2, [r7, #23]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e8      	bne.n	8004fa0 <USBD_GetString+0x50>
    }
  } 
}
 8004fce:	bf00      	nop
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8004fe2:	e005      	b.n	8004ff0 <USBD_GetLen+0x1a>
    {
        len++;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
        buf++;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3301      	adds	r3, #1
 8004fee:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f5      	bne.n	8004fe4 <USBD_GetLen+0xe>
    }

    return len;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2202      	movs	r2, #2
 8005016:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8005020:	88fa      	ldrh	r2, [r7, #6]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	2100      	movs	r1, #0
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f001 fff5 	bl	800701c <USBD_LL_Transmit>
  
  return USBD_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	4613      	mov	r3, r2
 8005048:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	2100      	movs	r1, #0
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f001 ffe3 	bl	800701c <USBD_LL_Transmit>
  
  return USBD_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2203      	movs	r2, #3
 8005072:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8005076:	88fa      	ldrh	r2, [r7, #6]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	2100      	movs	r1, #0
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f001 ffe8 	bl	8007062 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	2100      	movs	r1, #0
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f001 ffd6 	bl	8007062 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2204      	movs	r2, #4
 80050cc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80050d0:	2300      	movs	r3, #0
 80050d2:	2200      	movs	r2, #0
 80050d4:	2100      	movs	r1, #0
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 ffa0 	bl	800701c <USBD_LL_Transmit>
  
  return USBD_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2205      	movs	r2, #5
 80050f2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80050f6:	2300      	movs	r3, #0
 80050f8:	2200      	movs	r2, #0
 80050fa:	2100      	movs	r1, #0
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f001 ffb0 	bl	8007062 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800511a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800511e:	2b84      	cmp	r3, #132	; 0x84
 8005120:	d005      	beq.n	800512e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005122:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	3303      	adds	r3, #3
 800512c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800512e:	68fb      	ldr	r3, [r7, #12]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800513e:	f000 fa55 	bl	80055ec <vTaskStartScheduler>
  
  return osOK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd80      	pop	{r7, pc}

08005148 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800514a:	b087      	sub	sp, #28
 800514c:	af02      	add	r7, sp, #8
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685c      	ldr	r4, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800515e:	b29e      	uxth	r6, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff ffd0 	bl	800510c <makeFreeRtosPriority>
 800516c:	4602      	mov	r2, r0
 800516e:	f107 030c 	add.w	r3, r7, #12
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	9200      	str	r2, [sp, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	4632      	mov	r2, r6
 800517a:	4629      	mov	r1, r5
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f8d8 	bl	8005332 <xTaskCreate>
 8005182:	4603      	mov	r3, r0
 8005184:	2b01      	cmp	r3, #1
 8005186:	d001      	beq.n	800518c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005188:	2300      	movs	r3, #0
 800518a:	e000      	b.n	800518e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005196 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <osDelay+0x16>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	e000      	b.n	80051ae <osDelay+0x18>
 80051ac:	2301      	movs	r3, #1
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f9e8 	bl	8005584 <vTaskDelay>
  
  return osOK;
 80051b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80051c2:	f000 fce1 	bl	8005b88 <xTaskGetSchedulerState>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80051cc:	f000 feac 	bl	8005f28 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80051d0:	bf00      	nop
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f103 0208 	add.w	r2, r3, #8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f103 0208 	add.w	r2, r3, #8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f103 0208 	add.w	r2, r3, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr

0800522a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	601a      	str	r2, [r3, #0]
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005286:	d103      	bne.n	8005290 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e00c      	b.n	80052aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3308      	adds	r3, #8
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	e002      	b.n	800529e <vListInsert+0x2e>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d2f6      	bcs.n	8005298 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	601a      	str	r2, [r3, #0]
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6892      	ldr	r2, [r2, #8]
 80052f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6852      	ldr	r2, [r2, #4]
 8005300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	d103      	bne.n	8005314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	1e5a      	subs	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr

08005332 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005332:	b580      	push	{r7, lr}
 8005334:	b08c      	sub	sp, #48	; 0x30
 8005336:	af04      	add	r7, sp, #16
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	603b      	str	r3, [r7, #0]
 800533e:	4613      	mov	r3, r2
 8005340:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fe28 	bl	8005f9c <pvPortMalloc>
 800534c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00e      	beq.n	8005372 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005354:	2054      	movs	r0, #84	; 0x54
 8005356:	f000 fe21 	bl	8005f9c <pvPortMalloc>
 800535a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
 8005368:	e005      	b.n	8005376 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800536a:	6978      	ldr	r0, [r7, #20]
 800536c:	f000 fed8 	bl	8006120 <vPortFree>
 8005370:	e001      	b.n	8005376 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d013      	beq.n	80053a4 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	2300      	movs	r3, #0
 8005380:	9303      	str	r3, [sp, #12]
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	9302      	str	r3, [sp, #8]
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f80e 	bl	80053b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005398:	69f8      	ldr	r0, [r7, #28]
 800539a:	f000 f889 	bl	80054b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800539e:	2301      	movs	r3, #1
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e002      	b.n	80053aa <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053aa:	69bb      	ldr	r3, [r7, #24]
	}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053cc:	3b01      	subs	r3, #1
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e7fe      	b.n	80053f8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	e012      	b.n	8005426 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	4413      	add	r3, r2
 8005406:	7819      	ldrb	r1, [r3, #0]
 8005408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	3334      	adds	r3, #52	; 0x34
 8005410:	460a      	mov	r2, r1
 8005412:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d006      	beq.n	800542e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	3301      	adds	r3, #1
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	2b0f      	cmp	r3, #15
 800542a:	d9e9      	bls.n	8005400 <prvInitialiseNewTask+0x4c>
 800542c:	e000      	b.n	8005430 <prvInitialiseNewTask+0x7c>
		{
			break;
 800542e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	2b06      	cmp	r3, #6
 800543c:	d901      	bls.n	8005442 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800543e:	2306      	movs	r3, #6
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800544c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	2200      	movs	r2, #0
 8005452:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	3304      	adds	r3, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff feda 	bl	8005212 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	3318      	adds	r3, #24
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fed5 	bl	8005212 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	f1c3 0207 	rsb	r2, r3, #7
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	2200      	movs	r2, #0
 8005482:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	69b8      	ldr	r0, [r7, #24]
 8005492:	f000 fbfd 	bl	8005c90 <pxPortInitialiseStack>
 8005496:	4602      	mov	r2, r0
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054a8:	bf00      	nop
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054b8:	f000 fcbc 	bl	8005e34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054bc:	4b2a      	ldr	r3, [pc, #168]	; (8005568 <prvAddNewTaskToReadyList+0xb8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	4a29      	ldr	r2, [pc, #164]	; (8005568 <prvAddNewTaskToReadyList+0xb8>)
 80054c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054c6:	4b29      	ldr	r3, [pc, #164]	; (800556c <prvAddNewTaskToReadyList+0xbc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054ce:	4a27      	ldr	r2, [pc, #156]	; (800556c <prvAddNewTaskToReadyList+0xbc>)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054d4:	4b24      	ldr	r3, [pc, #144]	; (8005568 <prvAddNewTaskToReadyList+0xb8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d110      	bne.n	80054fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054dc:	f000 faa4 	bl	8005a28 <prvInitialiseTaskLists>
 80054e0:	e00d      	b.n	80054fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054e2:	4b23      	ldr	r3, [pc, #140]	; (8005570 <prvAddNewTaskToReadyList+0xc0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d109      	bne.n	80054fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054ea:	4b20      	ldr	r3, [pc, #128]	; (800556c <prvAddNewTaskToReadyList+0xbc>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d802      	bhi.n	80054fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054f8:	4a1c      	ldr	r2, [pc, #112]	; (800556c <prvAddNewTaskToReadyList+0xbc>)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <prvAddNewTaskToReadyList+0xc4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	4a1b      	ldr	r2, [pc, #108]	; (8005574 <prvAddNewTaskToReadyList+0xc4>)
 8005506:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	2201      	movs	r2, #1
 800550e:	409a      	lsls	r2, r3
 8005510:	4b19      	ldr	r3, [pc, #100]	; (8005578 <prvAddNewTaskToReadyList+0xc8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4313      	orrs	r3, r2
 8005516:	4a18      	ldr	r2, [pc, #96]	; (8005578 <prvAddNewTaskToReadyList+0xc8>)
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4a15      	ldr	r2, [pc, #84]	; (800557c <prvAddNewTaskToReadyList+0xcc>)
 8005528:	441a      	add	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f7ff fe7a 	bl	800522a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005536:	f000 fcab 	bl	8005e90 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800553a:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <prvAddNewTaskToReadyList+0xc0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00e      	beq.n	8005560 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <prvAddNewTaskToReadyList+0xbc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	429a      	cmp	r2, r3
 800554e:	d207      	bcs.n	8005560 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <prvAddNewTaskToReadyList+0xd0>)
 8005552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	200002a0 	.word	0x200002a0
 800556c:	200001a0 	.word	0x200001a0
 8005570:	200002ac 	.word	0x200002ac
 8005574:	200002bc 	.word	0x200002bc
 8005578:	200002a8 	.word	0x200002a8
 800557c:	200001a4 	.word	0x200001a4
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005596:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <vTaskDelay+0x60>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <vTaskDelay+0x2e>
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	e7fe      	b.n	80055b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80055b2:	f000 f861 	bl	8005678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055b6:	2100      	movs	r1, #0
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fb03 	bl	8005bc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055be:	f000 f869 	bl	8005694 <xTaskResumeAll>
 80055c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d107      	bne.n	80055da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80055ca:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <vTaskDelay+0x64>)
 80055cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	200002c8 	.word	0x200002c8
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80055f2:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <vTaskStartScheduler+0x74>)
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	2300      	movs	r3, #0
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	2300      	movs	r3, #0
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	4919      	ldr	r1, [pc, #100]	; (8005664 <vTaskStartScheduler+0x78>)
 8005600:	4819      	ldr	r0, [pc, #100]	; (8005668 <vTaskStartScheduler+0x7c>)
 8005602:	f7ff fe96 	bl	8005332 <xTaskCreate>
 8005606:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d115      	bne.n	800563a <vTaskStartScheduler+0x4e>
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005620:	4b12      	ldr	r3, [pc, #72]	; (800566c <vTaskStartScheduler+0x80>)
 8005622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005626:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <vTaskStartScheduler+0x84>)
 800562a:	2201      	movs	r2, #1
 800562c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800562e:	4b11      	ldr	r3, [pc, #68]	; (8005674 <vTaskStartScheduler+0x88>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005634:	f000 fba0 	bl	8005d78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005638:	e00d      	b.n	8005656 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005640:	d109      	bne.n	8005656 <vTaskStartScheduler+0x6a>
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	607b      	str	r3, [r7, #4]
 8005654:	e7fe      	b.n	8005654 <vTaskStartScheduler+0x68>
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	200002c4 	.word	0x200002c4
 8005664:	08007454 	.word	0x08007454
 8005668:	080059f9 	.word	0x080059f9
 800566c:	200002c0 	.word	0x200002c0
 8005670:	200002ac 	.word	0x200002ac
 8005674:	200002a4 	.word	0x200002a4

08005678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <vTaskSuspendAll+0x18>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	4a03      	ldr	r2, [pc, #12]	; (8005690 <vTaskSuspendAll+0x18>)
 8005684:	6013      	str	r3, [r2, #0]
}
 8005686:	bf00      	nop
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	200002c8 	.word	0x200002c8

08005694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800569e:	2300      	movs	r3, #0
 80056a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056a2:	4b41      	ldr	r3, [pc, #260]	; (80057a8 <xTaskResumeAll+0x114>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <xTaskResumeAll+0x2a>
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	e7fe      	b.n	80056bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056be:	f000 fbb9 	bl	8005e34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056c2:	4b39      	ldr	r3, [pc, #228]	; (80057a8 <xTaskResumeAll+0x114>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	4a37      	ldr	r2, [pc, #220]	; (80057a8 <xTaskResumeAll+0x114>)
 80056ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056cc:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <xTaskResumeAll+0x114>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d161      	bne.n	8005798 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056d4:	4b35      	ldr	r3, [pc, #212]	; (80057ac <xTaskResumeAll+0x118>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d05d      	beq.n	8005798 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056dc:	e02e      	b.n	800573c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056de:	4b34      	ldr	r3, [pc, #208]	; (80057b0 <xTaskResumeAll+0x11c>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3318      	adds	r3, #24
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fdf8 	bl	80052e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fdf3 	bl	80052e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	2201      	movs	r2, #1
 8005700:	409a      	lsls	r2, r3
 8005702:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <xTaskResumeAll+0x120>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4313      	orrs	r3, r2
 8005708:	4a2a      	ldr	r2, [pc, #168]	; (80057b4 <xTaskResumeAll+0x120>)
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4a27      	ldr	r2, [pc, #156]	; (80057b8 <xTaskResumeAll+0x124>)
 800571a:	441a      	add	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7ff fd81 	bl	800522a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	4b23      	ldr	r3, [pc, #140]	; (80057bc <xTaskResumeAll+0x128>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	429a      	cmp	r2, r3
 8005734:	d302      	bcc.n	800573c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005736:	4b22      	ldr	r3, [pc, #136]	; (80057c0 <xTaskResumeAll+0x12c>)
 8005738:	2201      	movs	r2, #1
 800573a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800573c:	4b1c      	ldr	r3, [pc, #112]	; (80057b0 <xTaskResumeAll+0x11c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1cc      	bne.n	80056de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800574a:	f000 f9f9 	bl	8005b40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800574e:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <xTaskResumeAll+0x130>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d010      	beq.n	800577c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800575a:	f000 f837 	bl	80057cc <xTaskIncrementTick>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <xTaskResumeAll+0x12c>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3b01      	subs	r3, #1
 800576e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f1      	bne.n	800575a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005776:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <xTaskResumeAll+0x130>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800577c:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <xTaskResumeAll+0x12c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d009      	beq.n	8005798 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005788:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <xTaskResumeAll+0x134>)
 800578a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005798:	f000 fb7a 	bl	8005e90 <vPortExitCritical>

	return xAlreadyYielded;
 800579c:	68bb      	ldr	r3, [r7, #8]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	200002c8 	.word	0x200002c8
 80057ac:	200002a0 	.word	0x200002a0
 80057b0:	20000260 	.word	0x20000260
 80057b4:	200002a8 	.word	0x200002a8
 80057b8:	200001a4 	.word	0x200001a4
 80057bc:	200001a0 	.word	0x200001a0
 80057c0:	200002b4 	.word	0x200002b4
 80057c4:	200002b0 	.word	0x200002b0
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d6:	4b50      	ldr	r3, [pc, #320]	; (8005918 <xTaskIncrementTick+0x14c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f040 808c 	bne.w	80058f8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80057e0:	4b4e      	ldr	r3, [pc, #312]	; (800591c <xTaskIncrementTick+0x150>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057e8:	4a4c      	ldr	r2, [pc, #304]	; (800591c <xTaskIncrementTick+0x150>)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11f      	bne.n	8005834 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80057f4:	4b4a      	ldr	r3, [pc, #296]	; (8005920 <xTaskIncrementTick+0x154>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <xTaskIncrementTick+0x46>
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	e7fe      	b.n	8005810 <xTaskIncrementTick+0x44>
 8005812:	4b43      	ldr	r3, [pc, #268]	; (8005920 <xTaskIncrementTick+0x154>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	4b42      	ldr	r3, [pc, #264]	; (8005924 <xTaskIncrementTick+0x158>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a40      	ldr	r2, [pc, #256]	; (8005920 <xTaskIncrementTick+0x154>)
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	4a40      	ldr	r2, [pc, #256]	; (8005924 <xTaskIncrementTick+0x158>)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b40      	ldr	r3, [pc, #256]	; (8005928 <xTaskIncrementTick+0x15c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3301      	adds	r3, #1
 800582c:	4a3e      	ldr	r2, [pc, #248]	; (8005928 <xTaskIncrementTick+0x15c>)
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	f000 f986 	bl	8005b40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005834:	4b3d      	ldr	r3, [pc, #244]	; (800592c <xTaskIncrementTick+0x160>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d34d      	bcc.n	80058da <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800583e:	4b38      	ldr	r3, [pc, #224]	; (8005920 <xTaskIncrementTick+0x154>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <xTaskIncrementTick+0x80>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <xTaskIncrementTick+0x82>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005852:	4b36      	ldr	r3, [pc, #216]	; (800592c <xTaskIncrementTick+0x160>)
 8005854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005858:	601a      	str	r2, [r3, #0]
					break;
 800585a:	e03e      	b.n	80058da <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800585c:	4b30      	ldr	r3, [pc, #192]	; (8005920 <xTaskIncrementTick+0x154>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	d203      	bcs.n	800587c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005874:	4a2d      	ldr	r2, [pc, #180]	; (800592c <xTaskIncrementTick+0x160>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6013      	str	r3, [r2, #0]
						break;
 800587a:	e02e      	b.n	80058da <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	3304      	adds	r3, #4
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff fd2d 	bl	80052e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	3318      	adds	r3, #24
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fd24 	bl	80052e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	2201      	movs	r2, #1
 800589e:	409a      	lsls	r2, r3
 80058a0:	4b23      	ldr	r3, [pc, #140]	; (8005930 <xTaskIncrementTick+0x164>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	4a22      	ldr	r2, [pc, #136]	; (8005930 <xTaskIncrementTick+0x164>)
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <xTaskIncrementTick+0x168>)
 80058b8:	441a      	add	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	3304      	adds	r3, #4
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f7ff fcb2 	bl	800522a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ca:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <xTaskIncrementTick+0x16c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3b4      	bcc.n	800583e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058d8:	e7b1      	b.n	800583e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058da:	4b17      	ldr	r3, [pc, #92]	; (8005938 <xTaskIncrementTick+0x16c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e0:	4914      	ldr	r1, [pc, #80]	; (8005934 <xTaskIncrementTick+0x168>)
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d907      	bls.n	8005902 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80058f2:	2301      	movs	r3, #1
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	e004      	b.n	8005902 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <xTaskIncrementTick+0x170>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	4a0f      	ldr	r2, [pc, #60]	; (800593c <xTaskIncrementTick+0x170>)
 8005900:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005902:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <xTaskIncrementTick+0x174>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800590a:	2301      	movs	r3, #1
 800590c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800590e:	697b      	ldr	r3, [r7, #20]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	200002c8 	.word	0x200002c8
 800591c:	200002a4 	.word	0x200002a4
 8005920:	20000258 	.word	0x20000258
 8005924:	2000025c 	.word	0x2000025c
 8005928:	200002b8 	.word	0x200002b8
 800592c:	200002c0 	.word	0x200002c0
 8005930:	200002a8 	.word	0x200002a8
 8005934:	200001a4 	.word	0x200001a4
 8005938:	200001a0 	.word	0x200001a0
 800593c:	200002b0 	.word	0x200002b0
 8005940:	200002b4 	.word	0x200002b4

08005944 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800594a:	4b26      	ldr	r3, [pc, #152]	; (80059e4 <vTaskSwitchContext+0xa0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005952:	4b25      	ldr	r3, [pc, #148]	; (80059e8 <vTaskSwitchContext+0xa4>)
 8005954:	2201      	movs	r2, #1
 8005956:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005958:	e03e      	b.n	80059d8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800595a:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <vTaskSwitchContext+0xa4>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005960:	4b22      	ldr	r3, [pc, #136]	; (80059ec <vTaskSwitchContext+0xa8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	fab3 f383 	clz	r3, r3
 800596c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800596e:	7afb      	ldrb	r3, [r7, #11]
 8005970:	f1c3 031f 	rsb	r3, r3, #31
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	491e      	ldr	r1, [pc, #120]	; (80059f0 <vTaskSwitchContext+0xac>)
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <vTaskSwitchContext+0x5a>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	607b      	str	r3, [r7, #4]
 800599c:	e7fe      	b.n	800599c <vTaskSwitchContext+0x58>
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4a11      	ldr	r2, [pc, #68]	; (80059f0 <vTaskSwitchContext+0xac>)
 80059aa:	4413      	add	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	605a      	str	r2, [r3, #4]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	3308      	adds	r3, #8
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d104      	bne.n	80059ce <vTaskSwitchContext+0x8a>
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	605a      	str	r2, [r3, #4]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a07      	ldr	r2, [pc, #28]	; (80059f4 <vTaskSwitchContext+0xb0>)
 80059d6:	6013      	str	r3, [r2, #0]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	200002c8 	.word	0x200002c8
 80059e8:	200002b4 	.word	0x200002b4
 80059ec:	200002a8 	.word	0x200002a8
 80059f0:	200001a4 	.word	0x200001a4
 80059f4:	200001a0 	.word	0x200001a0

080059f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a00:	f000 f852 	bl	8005aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <prvIdleTask+0x28>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d9f9      	bls.n	8005a00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <prvIdleTask+0x2c>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a1c:	e7f0      	b.n	8005a00 <prvIdleTask+0x8>
 8005a1e:	bf00      	nop
 8005a20:	200001a4 	.word	0x200001a4
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a2e:	2300      	movs	r3, #0
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	e00c      	b.n	8005a4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <prvInitialiseTaskLists+0x60>)
 8005a40:	4413      	add	r3, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fbc6 	bl	80051d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	607b      	str	r3, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d9ef      	bls.n	8005a34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a54:	480d      	ldr	r0, [pc, #52]	; (8005a8c <prvInitialiseTaskLists+0x64>)
 8005a56:	f7ff fbbd 	bl	80051d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a5a:	480d      	ldr	r0, [pc, #52]	; (8005a90 <prvInitialiseTaskLists+0x68>)
 8005a5c:	f7ff fbba 	bl	80051d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a60:	480c      	ldr	r0, [pc, #48]	; (8005a94 <prvInitialiseTaskLists+0x6c>)
 8005a62:	f7ff fbb7 	bl	80051d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a66:	480c      	ldr	r0, [pc, #48]	; (8005a98 <prvInitialiseTaskLists+0x70>)
 8005a68:	f7ff fbb4 	bl	80051d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a6c:	480b      	ldr	r0, [pc, #44]	; (8005a9c <prvInitialiseTaskLists+0x74>)
 8005a6e:	f7ff fbb1 	bl	80051d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <prvInitialiseTaskLists+0x78>)
 8005a74:	4a05      	ldr	r2, [pc, #20]	; (8005a8c <prvInitialiseTaskLists+0x64>)
 8005a76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a78:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <prvInitialiseTaskLists+0x7c>)
 8005a7a:	4a05      	ldr	r2, [pc, #20]	; (8005a90 <prvInitialiseTaskLists+0x68>)
 8005a7c:	601a      	str	r2, [r3, #0]
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	200001a4 	.word	0x200001a4
 8005a8c:	20000230 	.word	0x20000230
 8005a90:	20000244 	.word	0x20000244
 8005a94:	20000260 	.word	0x20000260
 8005a98:	20000274 	.word	0x20000274
 8005a9c:	2000028c 	.word	0x2000028c
 8005aa0:	20000258 	.word	0x20000258
 8005aa4:	2000025c 	.word	0x2000025c

08005aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aae:	e028      	b.n	8005b02 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8005ab0:	f7ff fde2 	bl	8005678 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005ab4:	4b17      	ldr	r3, [pc, #92]	; (8005b14 <prvCheckTasksWaitingTermination+0x6c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8005ac4:	f7ff fde6 	bl	8005694 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d119      	bne.n	8005b02 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8005ace:	f000 f9b1 	bl	8005e34 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005ad2:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <prvCheckTasksWaitingTermination+0x6c>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fbfe 	bl	80052e0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <prvCheckTasksWaitingTermination+0x70>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	4a0b      	ldr	r2, [pc, #44]	; (8005b18 <prvCheckTasksWaitingTermination+0x70>)
 8005aec:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8005aee:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <prvCheckTasksWaitingTermination+0x74>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	4a09      	ldr	r2, [pc, #36]	; (8005b1c <prvCheckTasksWaitingTermination+0x74>)
 8005af6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8005af8:	f000 f9ca 	bl	8005e90 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8005afc:	6838      	ldr	r0, [r7, #0]
 8005afe:	f000 f80f 	bl	8005b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <prvCheckTasksWaitingTermination+0x74>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1d2      	bne.n	8005ab0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000274 	.word	0x20000274
 8005b18:	200002a0 	.word	0x200002a0
 8005b1c:	20000288 	.word	0x20000288

08005b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 faf7 	bl	8006120 <vPortFree>
			vPortFree( pxTCB );
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 faf4 	bl	8006120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b46:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <prvResetNextTaskUnblockTime+0x40>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <prvResetNextTaskUnblockTime+0x14>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <prvResetNextTaskUnblockTime+0x16>
 8005b54:	2300      	movs	r3, #0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d004      	beq.n	8005b64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <prvResetNextTaskUnblockTime+0x44>)
 8005b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b62:	e008      	b.n	8005b76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <prvResetNextTaskUnblockTime+0x40>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4a04      	ldr	r2, [pc, #16]	; (8005b84 <prvResetNextTaskUnblockTime+0x44>)
 8005b74:	6013      	str	r3, [r2, #0]
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr
 8005b80:	20000258 	.word	0x20000258
 8005b84:	200002c0 	.word	0x200002c0

08005b88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b8e:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <xTaskGetSchedulerState+0x34>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b96:	2301      	movs	r3, #1
 8005b98:	607b      	str	r3, [r7, #4]
 8005b9a:	e008      	b.n	8005bae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b9c:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <xTaskGetSchedulerState+0x38>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	e001      	b.n	8005bae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005baa:	2300      	movs	r3, #0
 8005bac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bae:	687b      	ldr	r3, [r7, #4]
	}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	200002ac 	.word	0x200002ac
 8005bc0:	200002c8 	.word	0x200002c8

08005bc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bce:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bd4:	4b28      	ldr	r3, [pc, #160]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff fb80 	bl	80052e0 <uxListRemove>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10b      	bne.n	8005bfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005be6:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	2201      	movs	r2, #1
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	43da      	mvns	r2, r3
 8005bf4:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	4a20      	ldr	r2, [pc, #128]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c04:	d10a      	bne.n	8005c1c <prvAddCurrentTaskToDelayedList+0x58>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4619      	mov	r1, r3
 8005c14:	481a      	ldr	r0, [pc, #104]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c16:	f7ff fb08 	bl	800522a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c1a:	e026      	b.n	8005c6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4413      	add	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c24:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d209      	bcs.n	8005c48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c34:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4610      	mov	r0, r2
 8005c42:	f7ff fb15 	bl	8005270 <vListInsert>
}
 8005c46:	e010      	b.n	8005c6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c48:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f7ff fb0b 	bl	8005270 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d202      	bcs.n	8005c6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c64:	4a09      	ldr	r2, [pc, #36]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6013      	str	r3, [r2, #0]
}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	200002a4 	.word	0x200002a4
 8005c78:	200001a0 	.word	0x200001a0
 8005c7c:	200002a8 	.word	0x200002a8
 8005c80:	2000028c 	.word	0x2000028c
 8005c84:	2000025c 	.word	0x2000025c
 8005c88:	20000258 	.word	0x20000258
 8005c8c:	200002c0 	.word	0x200002c0

08005c90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3b04      	subs	r3, #4
 8005ca0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3b04      	subs	r3, #4
 8005cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f023 0201 	bic.w	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3b04      	subs	r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cc0:	4a08      	ldr	r2, [pc, #32]	; (8005ce4 <pxPortInitialiseStack+0x54>)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3b14      	subs	r3, #20
 8005cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3b20      	subs	r3, #32
 8005cd6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr
 8005ce4:	08005ce9 	.word	0x08005ce9

08005ce8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cee:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <prvTaskExitError+0x38>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cf6:	d009      	beq.n	8005d0c <prvTaskExitError+0x24>
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	e7fe      	b.n	8005d0a <prvTaskExitError+0x22>
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8005d1e:	e7fe      	b.n	8005d1e <prvTaskExitError+0x36>
 8005d20:	20000118 	.word	0x20000118
	...

08005d30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <pxCurrentTCBConst2>)
 8005d32:	6819      	ldr	r1, [r3, #0]
 8005d34:	6808      	ldr	r0, [r1, #0]
 8005d36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d3a:	f380 8809 	msr	PSP, r0
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f04f 0000 	mov.w	r0, #0
 8005d46:	f380 8811 	msr	BASEPRI, r0
 8005d4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005d4e:	4770      	bx	lr

08005d50 <pxCurrentTCBConst2>:
 8005d50:	200001a0 	.word	0x200001a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop

08005d58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005d58:	4806      	ldr	r0, [pc, #24]	; (8005d74 <prvPortStartFirstTask+0x1c>)
 8005d5a:	6800      	ldr	r0, [r0, #0]
 8005d5c:	6800      	ldr	r0, [r0, #0]
 8005d5e:	f380 8808 	msr	MSP, r0
 8005d62:	b662      	cpsie	i
 8005d64:	b661      	cpsie	f
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	df00      	svc	0
 8005d70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d72:	bf00      	nop
 8005d74:	e000ed08 	.word	0xe000ed08

08005d78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d7e:	4b28      	ldr	r3, [pc, #160]	; (8005e20 <xPortStartScheduler+0xa8>)
 8005d80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	22ff      	movs	r2, #255	; 0xff
 8005d8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <xPortStartScheduler+0xac>)
 8005da4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005da6:	4b20      	ldr	r3, [pc, #128]	; (8005e28 <xPortStartScheduler+0xb0>)
 8005da8:	2207      	movs	r2, #7
 8005daa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dac:	e009      	b.n	8005dc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005dae:	4b1e      	ldr	r3, [pc, #120]	; (8005e28 <xPortStartScheduler+0xb0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	4a1c      	ldr	r2, [pc, #112]	; (8005e28 <xPortStartScheduler+0xb0>)
 8005db6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dca:	2b80      	cmp	r3, #128	; 0x80
 8005dcc:	d0ef      	beq.n	8005dae <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dce:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <xPortStartScheduler+0xb0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <xPortStartScheduler+0xb0>)
 8005dd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dd8:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <xPortStartScheduler+0xb0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005de0:	4a11      	ldr	r2, [pc, #68]	; (8005e28 <xPortStartScheduler+0xb0>)
 8005de2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dec:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <xPortStartScheduler+0xb4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0e      	ldr	r2, [pc, #56]	; (8005e2c <xPortStartScheduler+0xb4>)
 8005df2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005df6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <xPortStartScheduler+0xb4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a0b      	ldr	r2, [pc, #44]	; (8005e2c <xPortStartScheduler+0xb4>)
 8005dfe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e04:	f000 f8b0 	bl	8005f68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <xPortStartScheduler+0xb8>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e0e:	f7ff ffa3 	bl	8005d58 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8005e12:	f7ff ff69 	bl	8005ce8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	e000e400 	.word	0xe000e400
 8005e24:	200002cc 	.word	0x200002cc
 8005e28:	200002d0 	.word	0x200002d0
 8005e2c:	e000ed20 	.word	0xe000ed20
 8005e30:	20000118 	.word	0x20000118

08005e34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <vPortEnterCritical+0x54>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	4a0d      	ldr	r2, [pc, #52]	; (8005e88 <vPortEnterCritical+0x54>)
 8005e54:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <vPortEnterCritical+0x54>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d10e      	bne.n	8005e7c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <vPortEnterCritical+0x58>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d009      	beq.n	8005e7c <vPortEnterCritical+0x48>
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	e7fe      	b.n	8005e7a <vPortEnterCritical+0x46>
	}
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20000118 	.word	0x20000118
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <vPortExitCritical+0x48>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <vPortExitCritical+0x22>
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	e7fe      	b.n	8005eb0 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <vPortExitCritical+0x48>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	4a07      	ldr	r2, [pc, #28]	; (8005ed8 <vPortExitCritical+0x48>)
 8005eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <vPortExitCritical+0x48>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <vPortExitCritical+0x3e>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr
 8005ed8:	20000118 	.word	0x20000118
 8005edc:	00000000 	.word	0x00000000

08005ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ee0:	f3ef 8009 	mrs	r0, PSP
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <pxCurrentTCBConst>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ef0:	6010      	str	r0, [r2, #0]
 8005ef2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ef6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005efa:	f380 8811 	msr	BASEPRI, r0
 8005efe:	f7ff fd21 	bl	8005944 <vTaskSwitchContext>
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	6808      	ldr	r0, [r1, #0]
 8005f12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f16:	f380 8809 	msr	PSP, r0
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	4770      	bx	lr

08005f20 <pxCurrentTCBConst>:
 8005f20:	200001a0 	.word	0x200001a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f40:	f7ff fc44 	bl	80057cc <xTaskIncrementTick>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f4a:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <xPortSysTickHandler+0x3c>)
 8005f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	2300      	movs	r3, #0
 8005f54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	e000ed04 	.word	0xe000ed04

08005f68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f6c:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <vPortSetupTimerInterrupt+0x24>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <vPortSetupTimerInterrupt+0x28>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	099b      	lsrs	r3, r3, #6
 8005f78:	4a06      	ldr	r2, [pc, #24]	; (8005f94 <vPortSetupTimerInterrupt+0x2c>)
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <vPortSetupTimerInterrupt+0x30>)
 8005f80:	2207      	movs	r2, #7
 8005f82:	601a      	str	r2, [r3, #0]
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr
 8005f8c:	2000011c 	.word	0x2000011c
 8005f90:	10624dd3 	.word	0x10624dd3
 8005f94:	e000e014 	.word	0xe000e014
 8005f98:	e000e010 	.word	0xe000e010

08005f9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fa8:	f7ff fb66 	bl	8005678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fac:	4b57      	ldr	r3, [pc, #348]	; (800610c <pvPortMalloc+0x170>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fb4:	f000 f90c 	bl	80061d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fb8:	4b55      	ldr	r3, [pc, #340]	; (8006110 <pvPortMalloc+0x174>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f040 808c 	bne.w	80060de <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01c      	beq.n	8006006 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005fcc:	2208      	movs	r2, #8
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d013      	beq.n	8006006 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f023 0307 	bic.w	r3, r3, #7
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <pvPortMalloc+0x6a>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e7fe      	b.n	8006004 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d068      	beq.n	80060de <pvPortMalloc+0x142>
 800600c:	4b41      	ldr	r3, [pc, #260]	; (8006114 <pvPortMalloc+0x178>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	429a      	cmp	r2, r3
 8006014:	d863      	bhi.n	80060de <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006016:	4b40      	ldr	r3, [pc, #256]	; (8006118 <pvPortMalloc+0x17c>)
 8006018:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800601a:	4b3f      	ldr	r3, [pc, #252]	; (8006118 <pvPortMalloc+0x17c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006020:	e004      	b.n	800602c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	429a      	cmp	r2, r3
 8006034:	d903      	bls.n	800603e <pvPortMalloc+0xa2>
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f1      	bne.n	8006022 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800603e:	4b33      	ldr	r3, [pc, #204]	; (800610c <pvPortMalloc+0x170>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006044:	429a      	cmp	r2, r3
 8006046:	d04a      	beq.n	80060de <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2208      	movs	r2, #8
 800604e:	4413      	add	r3, r2
 8006050:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	1ad2      	subs	r2, r2, r3
 8006062:	2308      	movs	r3, #8
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	429a      	cmp	r2, r3
 8006068:	d91e      	bls.n	80060a8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800606a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4413      	add	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	2b00      	cmp	r3, #0
 800607a:	d009      	beq.n	8006090 <pvPortMalloc+0xf4>
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	e7fe      	b.n	800608e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	1ad2      	subs	r2, r2, r3
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060a2:	69b8      	ldr	r0, [r7, #24]
 80060a4:	f000 f8f6 	bl	8006294 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060a8:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <pvPortMalloc+0x178>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	4a18      	ldr	r2, [pc, #96]	; (8006114 <pvPortMalloc+0x178>)
 80060b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060b6:	4b17      	ldr	r3, [pc, #92]	; (8006114 <pvPortMalloc+0x178>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <pvPortMalloc+0x180>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d203      	bcs.n	80060ca <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060c2:	4b14      	ldr	r3, [pc, #80]	; (8006114 <pvPortMalloc+0x178>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <pvPortMalloc+0x180>)
 80060c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	4b10      	ldr	r3, [pc, #64]	; (8006110 <pvPortMalloc+0x174>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060de:	f7ff fad9 	bl	8005694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d009      	beq.n	8006100 <pvPortMalloc+0x164>
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e7fe      	b.n	80060fe <pvPortMalloc+0x162>
	return pvReturn;
 8006100:	69fb      	ldr	r3, [r7, #28]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3728      	adds	r7, #40	; 0x28
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000edc 	.word	0x20000edc
 8006110:	20000ee8 	.word	0x20000ee8
 8006114:	20000ee0 	.word	0x20000ee0
 8006118:	20000ed4 	.word	0x20000ed4
 800611c:	20000ee4 	.word	0x20000ee4

08006120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d046      	beq.n	80061c0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006132:	2308      	movs	r3, #8
 8006134:	425b      	negs	r3, r3
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <vPortFree+0xa8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <vPortFree+0x42>
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e7fe      	b.n	8006160 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <vPortFree+0x5e>
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	e7fe      	b.n	800617c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <vPortFree+0xa8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d019      	beq.n	80061c0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d115      	bne.n	80061c0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <vPortFree+0xa8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	43db      	mvns	r3, r3
 800619e:	401a      	ands	r2, r3
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061a4:	f7ff fa68 	bl	8005678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <vPortFree+0xac>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4413      	add	r3, r2
 80061b2:	4a06      	ldr	r2, [pc, #24]	; (80061cc <vPortFree+0xac>)
 80061b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061b6:	6938      	ldr	r0, [r7, #16]
 80061b8:	f000 f86c 	bl	8006294 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061bc:	f7ff fa6a 	bl	8005694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061c0:	bf00      	nop
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	20000ee8 	.word	0x20000ee8
 80061cc:	20000ee0 	.word	0x20000ee0

080061d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061dc:	4b27      	ldr	r3, [pc, #156]	; (800627c <prvHeapInit+0xac>)
 80061de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3307      	adds	r3, #7
 80061ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0307 	bic.w	r3, r3, #7
 80061f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	4a1f      	ldr	r2, [pc, #124]	; (800627c <prvHeapInit+0xac>)
 8006200:	4413      	add	r3, r2
 8006202:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006208:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <prvHeapInit+0xb0>)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800620e:	4b1c      	ldr	r3, [pc, #112]	; (8006280 <prvHeapInit+0xb0>)
 8006210:	2200      	movs	r2, #0
 8006212:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	4413      	add	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800621c:	2208      	movs	r2, #8
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1a9b      	subs	r3, r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0307 	bic.w	r3, r3, #7
 800622a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4a15      	ldr	r2, [pc, #84]	; (8006284 <prvHeapInit+0xb4>)
 8006230:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006232:	4b14      	ldr	r3, [pc, #80]	; (8006284 <prvHeapInit+0xb4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800623a:	4b12      	ldr	r3, [pc, #72]	; (8006284 <prvHeapInit+0xb4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	1ad2      	subs	r2, r2, r3
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006250:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <prvHeapInit+0xb4>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	4a0a      	ldr	r2, [pc, #40]	; (8006288 <prvHeapInit+0xb8>)
 800625e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a09      	ldr	r2, [pc, #36]	; (800628c <prvHeapInit+0xbc>)
 8006266:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006268:	4b09      	ldr	r3, [pc, #36]	; (8006290 <prvHeapInit+0xc0>)
 800626a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800626e:	601a      	str	r2, [r3, #0]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	200002d4 	.word	0x200002d4
 8006280:	20000ed4 	.word	0x20000ed4
 8006284:	20000edc 	.word	0x20000edc
 8006288:	20000ee4 	.word	0x20000ee4
 800628c:	20000ee0 	.word	0x20000ee0
 8006290:	20000ee8 	.word	0x20000ee8

08006294 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800629c:	4b27      	ldr	r3, [pc, #156]	; (800633c <prvInsertBlockIntoFreeList+0xa8>)
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	e002      	b.n	80062a8 <prvInsertBlockIntoFreeList+0x14>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d8f7      	bhi.n	80062a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	4413      	add	r3, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d108      	bne.n	80062d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	441a      	add	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	441a      	add	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d118      	bne.n	800631c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4b14      	ldr	r3, [pc, #80]	; (8006340 <prvInsertBlockIntoFreeList+0xac>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d00d      	beq.n	8006312 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	441a      	add	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	e008      	b.n	8006324 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <prvInsertBlockIntoFreeList+0xac>)
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e003      	b.n	8006324 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	429a      	cmp	r2, r3
 800632a:	d002      	beq.n	8006332 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006332:	bf00      	nop
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr
 800633c:	20000ed4 	.word	0x20000ed4
 8006340:	20000edc 	.word	0x20000edc

08006344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006344:	b5b0      	push	{r4, r5, r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800634a:	f7f9 ff01 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800634e:	f000 f827 	bl	80063a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006352:	f000 f977 	bl	8006644 <MX_GPIO_Init>
  MX_DMA_Init();
 8006356:	f000 f957 	bl	8006608 <MX_DMA_Init>
  MX_ADC1_Init();
 800635a:	f000 f87f 	bl	800645c <MX_ADC1_Init>
  MX_ADC2_Init();
 800635e:	f000 f8bb 	bl	80064d8 <MX_ADC2_Init>
  MX_TIM3_Init();
 8006362:	f000 f8f7 	bl	8006554 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8006366:	2104      	movs	r1, #4
 8006368:	480a      	ldr	r0, [pc, #40]	; (8006394 <main+0x50>)
 800636a:	f7fc f961 	bl	8002630 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800636e:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <main+0x54>)
 8006370:	1d3c      	adds	r4, r7, #4
 8006372:	461d      	mov	r5, r3
 8006374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800637c:	1d3b      	adds	r3, r7, #4
 800637e:	2100      	movs	r1, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe fee1 	bl	8005148 <osThreadCreate>
 8006386:	4602      	mov	r2, r0
 8006388:	4b04      	ldr	r3, [pc, #16]	; (800639c <main+0x58>)
 800638a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800638c:	f7fe fed5 	bl	800513a <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006390:	e7fe      	b.n	8006390 <main+0x4c>
 8006392:	bf00      	nop
 8006394:	20001144 	.word	0x20001144
 8006398:	08007468 	.word	0x08007468
 800639c:	20001110 	.word	0x20001110

080063a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b094      	sub	sp, #80	; 0x50
 80063a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80063a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063aa:	2228      	movs	r2, #40	; 0x28
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 f832 	bl	8007418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80063b4:	f107 0314 	add.w	r3, r7, #20
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	605a      	str	r2, [r3, #4]
 80063be:	609a      	str	r2, [r3, #8]
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80063c4:	1d3b      	adds	r3, r7, #4
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	605a      	str	r2, [r3, #4]
 80063cc:	609a      	str	r2, [r3, #8]
 80063ce:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80063d0:	2301      	movs	r3, #1
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80063d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80063da:	2300      	movs	r3, #0
 80063dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80063de:	2301      	movs	r3, #1
 80063e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80063e2:	2302      	movs	r3, #2
 80063e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80063e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80063ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80063f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fb fc48 	bl	8001c8c <HAL_RCC_OscConfig>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8006402:	f000 f9cd 	bl	80067a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006406:	230f      	movs	r3, #15
 8006408:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800640a:	2302      	movs	r3, #2
 800640c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800640e:	2300      	movs	r3, #0
 8006410:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006416:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006418:	2300      	movs	r3, #0
 800641a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800641c:	f107 0314 	add.w	r3, r7, #20
 8006420:	2102      	movs	r1, #2
 8006422:	4618      	mov	r0, r3
 8006424:	f7fb fe96 	bl	8002154 <HAL_RCC_ClockConfig>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800642e:	f000 f9b7 	bl	80067a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8006432:	2312      	movs	r3, #18
 8006434:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800643c:	2300      	movs	r3, #0
 800643e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006440:	1d3b      	adds	r3, r7, #4
 8006442:	4618      	mov	r0, r3
 8006444:	f7fc f812 	bl	800246c <HAL_RCCEx_PeriphCLKConfig>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800644e:	f000 f9a7 	bl	80067a0 <Error_Handler>
  }
}
 8006452:	bf00      	nop
 8006454:	3750      	adds	r7, #80	; 0x50
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800646c:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <MX_ADC1_Init+0x74>)
 800646e:	4a19      	ldr	r2, [pc, #100]	; (80064d4 <MX_ADC1_Init+0x78>)
 8006470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006472:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <MX_ADC1_Init+0x74>)
 8006474:	2200      	movs	r2, #0
 8006476:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006478:	4b15      	ldr	r3, [pc, #84]	; (80064d0 <MX_ADC1_Init+0x74>)
 800647a:	2200      	movs	r2, #0
 800647c:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800647e:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <MX_ADC1_Init+0x74>)
 8006480:	2200      	movs	r2, #0
 8006482:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006484:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <MX_ADC1_Init+0x74>)
 8006486:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800648a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800648c:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <MX_ADC1_Init+0x74>)
 800648e:	2200      	movs	r2, #0
 8006490:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8006492:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <MX_ADC1_Init+0x74>)
 8006494:	2201      	movs	r2, #1
 8006496:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006498:	480d      	ldr	r0, [pc, #52]	; (80064d0 <MX_ADC1_Init+0x74>)
 800649a:	f7f9 febb 	bl	8000214 <HAL_ADC_Init>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80064a4:	f000 f97c 	bl	80067a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80064ac:	2301      	movs	r3, #1
 80064ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064b4:	1d3b      	adds	r3, r7, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	4805      	ldr	r0, [pc, #20]	; (80064d0 <MX_ADC1_Init+0x74>)
 80064ba:	f7f9 ff83 	bl	80003c4 <HAL_ADC_ConfigChannel>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80064c4:	f000 f96c 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20001184 	.word	0x20001184
 80064d4:	40012400 	.word	0x40012400

080064d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80064de:	1d3b      	adds	r3, r7, #4
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	605a      	str	r2, [r3, #4]
 80064e6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80064e8:	4b18      	ldr	r3, [pc, #96]	; (800654c <MX_ADC2_Init+0x74>)
 80064ea:	4a19      	ldr	r2, [pc, #100]	; (8006550 <MX_ADC2_Init+0x78>)
 80064ec:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80064ee:	4b17      	ldr	r3, [pc, #92]	; (800654c <MX_ADC2_Init+0x74>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80064f4:	4b15      	ldr	r3, [pc, #84]	; (800654c <MX_ADC2_Init+0x74>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	60da      	str	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80064fa:	4b14      	ldr	r3, [pc, #80]	; (800654c <MX_ADC2_Init+0x74>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	615a      	str	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006500:	4b12      	ldr	r3, [pc, #72]	; (800654c <MX_ADC2_Init+0x74>)
 8006502:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8006506:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006508:	4b10      	ldr	r3, [pc, #64]	; (800654c <MX_ADC2_Init+0x74>)
 800650a:	2200      	movs	r2, #0
 800650c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800650e:	4b0f      	ldr	r3, [pc, #60]	; (800654c <MX_ADC2_Init+0x74>)
 8006510:	2201      	movs	r2, #1
 8006512:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006514:	480d      	ldr	r0, [pc, #52]	; (800654c <MX_ADC2_Init+0x74>)
 8006516:	f7f9 fe7d 	bl	8000214 <HAL_ADC_Init>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8006520:	f000 f93e 	bl	80067a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006524:	2302      	movs	r3, #2
 8006526:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006528:	2301      	movs	r3, #1
 800652a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006530:	1d3b      	adds	r3, r7, #4
 8006532:	4619      	mov	r1, r3
 8006534:	4805      	ldr	r0, [pc, #20]	; (800654c <MX_ADC2_Init+0x74>)
 8006536:	f7f9 ff45 	bl	80003c4 <HAL_ADC_ConfigChannel>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8006540:	f000 f92e 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20001114 	.word	0x20001114
 8006550:	40012800 	.word	0x40012800

08006554 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08a      	sub	sp, #40	; 0x28
 8006558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800655a:	f107 0320 	add.w	r3, r7, #32
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006564:	1d3b      	adds	r3, r7, #4
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	605a      	str	r2, [r3, #4]
 800656c:	609a      	str	r2, [r3, #8]
 800656e:	60da      	str	r2, [r3, #12]
 8006570:	611a      	str	r2, [r3, #16]
 8006572:	615a      	str	r2, [r3, #20]
 8006574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006576:	4b22      	ldr	r3, [pc, #136]	; (8006600 <MX_TIM3_Init+0xac>)
 8006578:	4a22      	ldr	r2, [pc, #136]	; (8006604 <MX_TIM3_Init+0xb0>)
 800657a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 800657c:	4b20      	ldr	r3, [pc, #128]	; (8006600 <MX_TIM3_Init+0xac>)
 800657e:	2248      	movs	r2, #72	; 0x48
 8006580:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006582:	4b1f      	ldr	r3, [pc, #124]	; (8006600 <MX_TIM3_Init+0xac>)
 8006584:	2200      	movs	r2, #0
 8006586:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8006588:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <MX_TIM3_Init+0xac>)
 800658a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800658e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006590:	4b1b      	ldr	r3, [pc, #108]	; (8006600 <MX_TIM3_Init+0xac>)
 8006592:	2200      	movs	r2, #0
 8006594:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006596:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <MX_TIM3_Init+0xac>)
 8006598:	2200      	movs	r2, #0
 800659a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800659c:	4818      	ldr	r0, [pc, #96]	; (8006600 <MX_TIM3_Init+0xac>)
 800659e:	f7fc f81b 	bl	80025d8 <HAL_TIM_PWM_Init>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80065a8:	f000 f8fa 	bl	80067a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065ac:	2300      	movs	r3, #0
 80065ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065b0:	2300      	movs	r3, #0
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80065b4:	f107 0320 	add.w	r3, r7, #32
 80065b8:	4619      	mov	r1, r3
 80065ba:	4811      	ldr	r0, [pc, #68]	; (8006600 <MX_TIM3_Init+0xac>)
 80065bc:	f7fc fb4e 	bl	8002c5c <HAL_TIMEx_MasterConfigSynchronization>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80065c6:	f000 f8eb 	bl	80067a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065ca:	2360      	movs	r3, #96	; 0x60
 80065cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80065ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80065d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065d4:	2300      	movs	r3, #0
 80065d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80065dc:	1d3b      	adds	r3, r7, #4
 80065de:	2204      	movs	r2, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4807      	ldr	r0, [pc, #28]	; (8006600 <MX_TIM3_Init+0xac>)
 80065e4:	f7fc f84c 	bl	8002680 <HAL_TIM_PWM_ConfigChannel>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80065ee:	f000 f8d7 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80065f2:	4803      	ldr	r0, [pc, #12]	; (8006600 <MX_TIM3_Init+0xac>)
 80065f4:	f000 f9c2 	bl	800697c <HAL_TIM_MspPostInit>

}
 80065f8:	bf00      	nop
 80065fa:	3728      	adds	r7, #40	; 0x28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20001144 	.word	0x20001144
 8006604:	40000400 	.word	0x40000400

08006608 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <MX_DMA_Init+0x38>)
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	4a0b      	ldr	r2, [pc, #44]	; (8006640 <MX_DMA_Init+0x38>)
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	6153      	str	r3, [r2, #20]
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <MX_DMA_Init+0x38>)
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	607b      	str	r3, [r7, #4]
 8006624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8006626:	2200      	movs	r2, #0
 8006628:	2105      	movs	r1, #5
 800662a:	200b      	movs	r0, #11
 800662c:	f7fa f8cf 	bl	80007ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006630:	200b      	movs	r0, #11
 8006632:	f7fa f8e8 	bl	8000806 <HAL_NVIC_EnableIRQ>

}
 8006636:	bf00      	nop
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000

08006644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800664a:	f107 0310 	add.w	r3, r7, #16
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	605a      	str	r2, [r3, #4]
 8006654:	609a      	str	r2, [r3, #8]
 8006656:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006658:	4b49      	ldr	r3, [pc, #292]	; (8006780 <MX_GPIO_Init+0x13c>)
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	4a48      	ldr	r2, [pc, #288]	; (8006780 <MX_GPIO_Init+0x13c>)
 800665e:	f043 0320 	orr.w	r3, r3, #32
 8006662:	6193      	str	r3, [r2, #24]
 8006664:	4b46      	ldr	r3, [pc, #280]	; (8006780 <MX_GPIO_Init+0x13c>)
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006670:	4b43      	ldr	r3, [pc, #268]	; (8006780 <MX_GPIO_Init+0x13c>)
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	4a42      	ldr	r2, [pc, #264]	; (8006780 <MX_GPIO_Init+0x13c>)
 8006676:	f043 0304 	orr.w	r3, r3, #4
 800667a:	6193      	str	r3, [r2, #24]
 800667c:	4b40      	ldr	r3, [pc, #256]	; (8006780 <MX_GPIO_Init+0x13c>)
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	60bb      	str	r3, [r7, #8]
 8006686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006688:	4b3d      	ldr	r3, [pc, #244]	; (8006780 <MX_GPIO_Init+0x13c>)
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	4a3c      	ldr	r2, [pc, #240]	; (8006780 <MX_GPIO_Init+0x13c>)
 800668e:	f043 0308 	orr.w	r3, r3, #8
 8006692:	6193      	str	r3, [r2, #24]
 8006694:	4b3a      	ldr	r3, [pc, #232]	; (8006780 <MX_GPIO_Init+0x13c>)
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	607b      	str	r3, [r7, #4]
 800669e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80066a0:	2200      	movs	r2, #0
 80066a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066a6:	4837      	ldr	r0, [pc, #220]	; (8006784 <MX_GPIO_Init+0x140>)
 80066a8:	f7fa fb86 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80066ac:	2200      	movs	r2, #0
 80066ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066b2:	4835      	ldr	r0, [pc, #212]	; (8006788 <MX_GPIO_Init+0x144>)
 80066b4:	f7fa fb80 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80066b8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80066bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066c6:	f107 0310 	add.w	r3, r7, #16
 80066ca:	4619      	mov	r1, r3
 80066cc:	482e      	ldr	r0, [pc, #184]	; (8006788 <MX_GPIO_Init+0x144>)
 80066ce:	f7fa fa15 	bl	8000afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80066d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066e0:	f107 0310 	add.w	r3, r7, #16
 80066e4:	4619      	mov	r1, r3
 80066e6:	4827      	ldr	r0, [pc, #156]	; (8006784 <MX_GPIO_Init+0x140>)
 80066e8:	f7fa fa08 	bl	8000afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80066ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f2:	2302      	movs	r3, #2
 80066f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066f6:	2303      	movs	r3, #3
 80066f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066fa:	f107 0310 	add.w	r3, r7, #16
 80066fe:	4619      	mov	r1, r3
 8006700:	4820      	ldr	r0, [pc, #128]	; (8006784 <MX_GPIO_Init+0x140>)
 8006702:	f7fa f9fb 	bl	8000afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800670a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006710:	2300      	movs	r3, #0
 8006712:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006714:	f107 0310 	add.w	r3, r7, #16
 8006718:	4619      	mov	r1, r3
 800671a:	481a      	ldr	r0, [pc, #104]	; (8006784 <MX_GPIO_Init+0x140>)
 800671c:	f7fa f9ee 	bl	8000afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006726:	2301      	movs	r3, #1
 8006728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800672e:	2302      	movs	r3, #2
 8006730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006732:	f107 0310 	add.w	r3, r7, #16
 8006736:	4619      	mov	r1, r3
 8006738:	4812      	ldr	r0, [pc, #72]	; (8006784 <MX_GPIO_Init+0x140>)
 800673a:	f7fa f9df 	bl	8000afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800673e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006744:	2302      	movs	r3, #2
 8006746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006748:	2302      	movs	r3, #2
 800674a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800674c:	f107 0310 	add.w	r3, r7, #16
 8006750:	4619      	mov	r1, r3
 8006752:	480d      	ldr	r0, [pc, #52]	; (8006788 <MX_GPIO_Init+0x144>)
 8006754:	f7fa f9d2 	bl	8000afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800675c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800675e:	2301      	movs	r3, #1
 8006760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006762:	2300      	movs	r3, #0
 8006764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006766:	2302      	movs	r3, #2
 8006768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800676a:	f107 0310 	add.w	r3, r7, #16
 800676e:	4619      	mov	r1, r3
 8006770:	4805      	ldr	r0, [pc, #20]	; (8006788 <MX_GPIO_Init+0x144>)
 8006772:	f7fa f9c3 	bl	8000afc <HAL_GPIO_Init>

}
 8006776:	bf00      	nop
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40021000 	.word	0x40021000
 8006784:	40010800 	.word	0x40010800
 8006788:	40010c00 	.word	0x40010c00

0800678c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8006794:	f000 f98c 	bl	8006ab0 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006798:	2001      	movs	r0, #1
 800679a:	f7fe fcfc 	bl	8005196 <osDelay>
 800679e:	e7fb      	b.n	8006798 <StartDefaultTask+0xc>

080067a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr

080067ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80067b2:	4b18      	ldr	r3, [pc, #96]	; (8006814 <HAL_MspInit+0x68>)
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	4a17      	ldr	r2, [pc, #92]	; (8006814 <HAL_MspInit+0x68>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	6193      	str	r3, [r2, #24]
 80067be:	4b15      	ldr	r3, [pc, #84]	; (8006814 <HAL_MspInit+0x68>)
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	60bb      	str	r3, [r7, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <HAL_MspInit+0x68>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	4a11      	ldr	r2, [pc, #68]	; (8006814 <HAL_MspInit+0x68>)
 80067d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d4:	61d3      	str	r3, [r2, #28]
 80067d6:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <HAL_MspInit+0x68>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80067e2:	2200      	movs	r2, #0
 80067e4:	210f      	movs	r1, #15
 80067e6:	f06f 0001 	mvn.w	r0, #1
 80067ea:	f7f9 fff0 	bl	80007ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80067ee:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <HAL_MspInit+0x6c>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	4a04      	ldr	r2, [pc, #16]	; (8006818 <HAL_MspInit+0x6c>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800680a:	bf00      	nop
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40021000 	.word	0x40021000
 8006818:	40010000 	.word	0x40010000

0800681c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006824:	f107 0318 	add.w	r3, r7, #24
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	605a      	str	r2, [r3, #4]
 800682e:	609a      	str	r2, [r3, #8]
 8006830:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a3c      	ldr	r2, [pc, #240]	; (8006928 <HAL_ADC_MspInit+0x10c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d14a      	bne.n	80068d2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800683c:	4b3b      	ldr	r3, [pc, #236]	; (800692c <HAL_ADC_MspInit+0x110>)
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	4a3a      	ldr	r2, [pc, #232]	; (800692c <HAL_ADC_MspInit+0x110>)
 8006842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006846:	6193      	str	r3, [r2, #24]
 8006848:	4b38      	ldr	r3, [pc, #224]	; (800692c <HAL_ADC_MspInit+0x110>)
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006854:	4b35      	ldr	r3, [pc, #212]	; (800692c <HAL_ADC_MspInit+0x110>)
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	4a34      	ldr	r2, [pc, #208]	; (800692c <HAL_ADC_MspInit+0x110>)
 800685a:	f043 0304 	orr.w	r3, r3, #4
 800685e:	6193      	str	r3, [r2, #24]
 8006860:	4b32      	ldr	r3, [pc, #200]	; (800692c <HAL_ADC_MspInit+0x110>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = ADCIN_Pin;
 800686c:	2301      	movs	r3, #1
 800686e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006870:	2303      	movs	r3, #3
 8006872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADCIN_GPIO_Port, &GPIO_InitStruct);
 8006874:	f107 0318 	add.w	r3, r7, #24
 8006878:	4619      	mov	r1, r3
 800687a:	482d      	ldr	r0, [pc, #180]	; (8006930 <HAL_ADC_MspInit+0x114>)
 800687c:	f7fa f93e 	bl	8000afc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006880:	4b2c      	ldr	r3, [pc, #176]	; (8006934 <HAL_ADC_MspInit+0x118>)
 8006882:	4a2d      	ldr	r2, [pc, #180]	; (8006938 <HAL_ADC_MspInit+0x11c>)
 8006884:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006886:	4b2b      	ldr	r3, [pc, #172]	; (8006934 <HAL_ADC_MspInit+0x118>)
 8006888:	2200      	movs	r2, #0
 800688a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800688c:	4b29      	ldr	r3, [pc, #164]	; (8006934 <HAL_ADC_MspInit+0x118>)
 800688e:	2200      	movs	r2, #0
 8006890:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006892:	4b28      	ldr	r3, [pc, #160]	; (8006934 <HAL_ADC_MspInit+0x118>)
 8006894:	2280      	movs	r2, #128	; 0x80
 8006896:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006898:	4b26      	ldr	r3, [pc, #152]	; (8006934 <HAL_ADC_MspInit+0x118>)
 800689a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800689e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80068a0:	4b24      	ldr	r3, [pc, #144]	; (8006934 <HAL_ADC_MspInit+0x118>)
 80068a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80068a8:	4b22      	ldr	r3, [pc, #136]	; (8006934 <HAL_ADC_MspInit+0x118>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80068ae:	4b21      	ldr	r3, [pc, #132]	; (8006934 <HAL_ADC_MspInit+0x118>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80068b4:	481f      	ldr	r0, [pc, #124]	; (8006934 <HAL_ADC_MspInit+0x118>)
 80068b6:	f7f9 ffc1 	bl	800083c <HAL_DMA_Init>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80068c0:	f7ff ff6e 	bl	80067a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a1b      	ldr	r2, [pc, #108]	; (8006934 <HAL_ADC_MspInit+0x118>)
 80068c8:	621a      	str	r2, [r3, #32]
 80068ca:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <HAL_ADC_MspInit+0x118>)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80068d0:	e026      	b.n	8006920 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a19      	ldr	r2, [pc, #100]	; (800693c <HAL_ADC_MspInit+0x120>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d121      	bne.n	8006920 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80068dc:	4b13      	ldr	r3, [pc, #76]	; (800692c <HAL_ADC_MspInit+0x110>)
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	4a12      	ldr	r2, [pc, #72]	; (800692c <HAL_ADC_MspInit+0x110>)
 80068e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068e6:	6193      	str	r3, [r2, #24]
 80068e8:	4b10      	ldr	r3, [pc, #64]	; (800692c <HAL_ADC_MspInit+0x110>)
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f4:	4b0d      	ldr	r3, [pc, #52]	; (800692c <HAL_ADC_MspInit+0x110>)
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	4a0c      	ldr	r2, [pc, #48]	; (800692c <HAL_ADC_MspInit+0x110>)
 80068fa:	f043 0304 	orr.w	r3, r3, #4
 80068fe:	6193      	str	r3, [r2, #24]
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <HAL_ADC_MspInit+0x110>)
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	60bb      	str	r3, [r7, #8]
 800690a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VSENSEL1_Pin|VSENSEL2_Pin|CPLSEL_Pin|VMON_Pin;
 800690c:	234e      	movs	r3, #78	; 0x4e
 800690e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006910:	2303      	movs	r3, #3
 8006912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006914:	f107 0318 	add.w	r3, r7, #24
 8006918:	4619      	mov	r1, r3
 800691a:	4805      	ldr	r0, [pc, #20]	; (8006930 <HAL_ADC_MspInit+0x114>)
 800691c:	f7fa f8ee 	bl	8000afc <HAL_GPIO_Init>
}
 8006920:	bf00      	nop
 8006922:	3728      	adds	r7, #40	; 0x28
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40012400 	.word	0x40012400
 800692c:	40021000 	.word	0x40021000
 8006930:	40010800 	.word	0x40010800
 8006934:	200011b4 	.word	0x200011b4
 8006938:	40020008 	.word	0x40020008
 800693c:	40012800 	.word	0x40012800

08006940 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a09      	ldr	r2, [pc, #36]	; (8006974 <HAL_TIM_PWM_MspInit+0x34>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d10b      	bne.n	800696a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <HAL_TIM_PWM_MspInit+0x38>)
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <HAL_TIM_PWM_MspInit+0x38>)
 8006958:	f043 0302 	orr.w	r3, r3, #2
 800695c:	61d3      	str	r3, [r2, #28]
 800695e:	4b06      	ldr	r3, [pc, #24]	; (8006978 <HAL_TIM_PWM_MspInit+0x38>)
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr
 8006974:	40000400 	.word	0x40000400
 8006978:	40021000 	.word	0x40021000

0800697c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006984:	f107 0310 	add.w	r3, r7, #16
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	605a      	str	r2, [r3, #4]
 800698e:	609a      	str	r2, [r3, #8]
 8006990:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a0f      	ldr	r2, [pc, #60]	; (80069d4 <HAL_TIM_MspPostInit+0x58>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d117      	bne.n	80069cc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800699c:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <HAL_TIM_MspPostInit+0x5c>)
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	4a0d      	ldr	r2, [pc, #52]	; (80069d8 <HAL_TIM_MspPostInit+0x5c>)
 80069a2:	f043 0304 	orr.w	r3, r3, #4
 80069a6:	6193      	str	r3, [r2, #24]
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_TIM_MspPostInit+0x5c>)
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80069b4:	2380      	movs	r3, #128	; 0x80
 80069b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b8:	2302      	movs	r3, #2
 80069ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069bc:	2302      	movs	r3, #2
 80069be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069c0:	f107 0310 	add.w	r3, r7, #16
 80069c4:	4619      	mov	r1, r3
 80069c6:	4805      	ldr	r0, [pc, #20]	; (80069dc <HAL_TIM_MspPostInit+0x60>)
 80069c8:	f7fa f898 	bl	8000afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80069cc:	bf00      	nop
 80069ce:	3720      	adds	r7, #32
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40000400 	.word	0x40000400
 80069d8:	40021000 	.word	0x40021000
 80069dc:	40010800 	.word	0x40010800

080069e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069f0:	e7fe      	b.n	80069f0 <HardFault_Handler+0x4>

080069f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069f2:	b480      	push	{r7}
 80069f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069f6:	e7fe      	b.n	80069f6 <MemManage_Handler+0x4>

080069f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069fc:	e7fe      	b.n	80069fc <BusFault_Handler+0x4>

080069fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069fe:	b480      	push	{r7}
 8006a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a02:	e7fe      	b.n	8006a02 <UsageFault_Handler+0x4>

08006a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a08:	bf00      	nop
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a14:	f7f9 fbe2 	bl	80001dc <HAL_IncTick>
  osSystickHandler();
 8006a18:	f7fe fbd1 	bl	80051be <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a1c:	bf00      	nop
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006a24:	4802      	ldr	r0, [pc, #8]	; (8006a30 <DMA1_Channel1_IRQHandler+0x10>)
 8006a26:	f7f9 ff63 	bl	80008f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006a2a:	bf00      	nop
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	200011b4 	.word	0x200011b4

08006a34 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006a38:	4802      	ldr	r0, [pc, #8]	; (8006a44 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8006a3a:	f7fa fad5 	bl	8000fe8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006a3e:	bf00      	nop
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20001bec 	.word	0x20001bec

08006a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006a4c:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <SystemInit+0x5c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a14      	ldr	r2, [pc, #80]	; (8006aa4 <SystemInit+0x5c>)
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006a58:	4b12      	ldr	r3, [pc, #72]	; (8006aa4 <SystemInit+0x5c>)
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	4911      	ldr	r1, [pc, #68]	; (8006aa4 <SystemInit+0x5c>)
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <SystemInit+0x60>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006a64:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <SystemInit+0x5c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a0e      	ldr	r2, [pc, #56]	; (8006aa4 <SystemInit+0x5c>)
 8006a6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006a74:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <SystemInit+0x5c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a0a      	ldr	r2, [pc, #40]	; (8006aa4 <SystemInit+0x5c>)
 8006a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006a80:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <SystemInit+0x5c>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	4a07      	ldr	r2, [pc, #28]	; (8006aa4 <SystemInit+0x5c>)
 8006a86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006a8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006a8c:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <SystemInit+0x5c>)
 8006a8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006a92:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <SystemInit+0x64>)
 8006a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a9a:	609a      	str	r2, [r3, #8]
#endif 
}
 8006a9c:	bf00      	nop
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr
 8006aa4:	40021000 	.word	0x40021000
 8006aa8:	f8ff0000 	.word	0xf8ff0000
 8006aac:	e000ed00 	.word	0xe000ed00

08006ab0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	4912      	ldr	r1, [pc, #72]	; (8006b00 <MX_USB_DEVICE_Init+0x50>)
 8006ab8:	4812      	ldr	r0, [pc, #72]	; (8006b04 <MX_USB_DEVICE_Init+0x54>)
 8006aba:	f7fd fc0b 	bl	80042d4 <USBD_Init>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ac4:	f7ff fe6c 	bl	80067a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ac8:	490f      	ldr	r1, [pc, #60]	; (8006b08 <MX_USB_DEVICE_Init+0x58>)
 8006aca:	480e      	ldr	r0, [pc, #56]	; (8006b04 <MX_USB_DEVICE_Init+0x54>)
 8006acc:	f7fd fc2d 	bl	800432a <USBD_RegisterClass>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ad6:	f7ff fe63 	bl	80067a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ada:	490c      	ldr	r1, [pc, #48]	; (8006b0c <MX_USB_DEVICE_Init+0x5c>)
 8006adc:	4809      	ldr	r0, [pc, #36]	; (8006b04 <MX_USB_DEVICE_Init+0x54>)
 8006ade:	f7fd fb8d 	bl	80041fc <USBD_CDC_RegisterInterface>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ae8:	f7ff fe5a 	bl	80067a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006aec:	4805      	ldr	r0, [pc, #20]	; (8006b04 <MX_USB_DEVICE_Init+0x54>)
 8006aee:	f7fd fc35 	bl	800435c <USBD_Start>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006af8:	f7ff fe52 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006afc:	bf00      	nop
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20000130 	.word	0x20000130
 8006b04:	200011f8 	.word	0x200011f8
 8006b08:	20000014 	.word	0x20000014
 8006b0c:	20000120 	.word	0x20000120

08006b10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b14:	2200      	movs	r2, #0
 8006b16:	4905      	ldr	r1, [pc, #20]	; (8006b2c <CDC_Init_FS+0x1c>)
 8006b18:	4805      	ldr	r0, [pc, #20]	; (8006b30 <CDC_Init_FS+0x20>)
 8006b1a:	f7fd fb85 	bl	8004228 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b1e:	4905      	ldr	r1, [pc, #20]	; (8006b34 <CDC_Init_FS+0x24>)
 8006b20:	4803      	ldr	r0, [pc, #12]	; (8006b30 <CDC_Init_FS+0x20>)
 8006b22:	f7fd fb9a 	bl	800425a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20001804 	.word	0x20001804
 8006b30:	200011f8 	.word	0x200011f8
 8006b34:	2000141c 	.word	0x2000141c

08006b38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr
	...

08006b48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	4603      	mov	r3, r0
 8006b50:	6039      	str	r1, [r7, #0]
 8006b52:	71fb      	strb	r3, [r7, #7]
 8006b54:	4613      	mov	r3, r2
 8006b56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	2b23      	cmp	r3, #35	; 0x23
 8006b5c:	d84a      	bhi.n	8006bf4 <CDC_Control_FS+0xac>
 8006b5e:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <CDC_Control_FS+0x1c>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006bf5 	.word	0x08006bf5
 8006b68:	08006bf5 	.word	0x08006bf5
 8006b6c:	08006bf5 	.word	0x08006bf5
 8006b70:	08006bf5 	.word	0x08006bf5
 8006b74:	08006bf5 	.word	0x08006bf5
 8006b78:	08006bf5 	.word	0x08006bf5
 8006b7c:	08006bf5 	.word	0x08006bf5
 8006b80:	08006bf5 	.word	0x08006bf5
 8006b84:	08006bf5 	.word	0x08006bf5
 8006b88:	08006bf5 	.word	0x08006bf5
 8006b8c:	08006bf5 	.word	0x08006bf5
 8006b90:	08006bf5 	.word	0x08006bf5
 8006b94:	08006bf5 	.word	0x08006bf5
 8006b98:	08006bf5 	.word	0x08006bf5
 8006b9c:	08006bf5 	.word	0x08006bf5
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006bf5 	.word	0x08006bf5
 8006ba8:	08006bf5 	.word	0x08006bf5
 8006bac:	08006bf5 	.word	0x08006bf5
 8006bb0:	08006bf5 	.word	0x08006bf5
 8006bb4:	08006bf5 	.word	0x08006bf5
 8006bb8:	08006bf5 	.word	0x08006bf5
 8006bbc:	08006bf5 	.word	0x08006bf5
 8006bc0:	08006bf5 	.word	0x08006bf5
 8006bc4:	08006bf5 	.word	0x08006bf5
 8006bc8:	08006bf5 	.word	0x08006bf5
 8006bcc:	08006bf5 	.word	0x08006bf5
 8006bd0:	08006bf5 	.word	0x08006bf5
 8006bd4:	08006bf5 	.word	0x08006bf5
 8006bd8:	08006bf5 	.word	0x08006bf5
 8006bdc:	08006bf5 	.word	0x08006bf5
 8006be0:	08006bf5 	.word	0x08006bf5
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006bf5 	.word	0x08006bf5
 8006bec:	08006bf5 	.word	0x08006bf5
 8006bf0:	08006bf5 	.word	0x08006bf5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006bf4:	bf00      	nop
  }

  return (USBD_OK);
 8006bf6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc80      	pop	{r7}
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop

08006c04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	4805      	ldr	r0, [pc, #20]	; (8006c28 <CDC_Receive_FS+0x24>)
 8006c12:	f7fd fb22 	bl	800425a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c16:	4804      	ldr	r0, [pc, #16]	; (8006c28 <CDC_Receive_FS+0x24>)
 8006c18:	f7fd fb32 	bl	8004280 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006c1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	200011f8 	.word	0x200011f8

08006c2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a0d      	ldr	r2, [pc, #52]	; (8006c70 <HAL_PCD_MspInit+0x44>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d113      	bne.n	8006c66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <HAL_PCD_MspInit+0x48>)
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	4a0c      	ldr	r2, [pc, #48]	; (8006c74 <HAL_PCD_MspInit+0x48>)
 8006c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c48:	61d3      	str	r3, [r2, #28]
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <HAL_PCD_MspInit+0x48>)
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8006c56:	2200      	movs	r2, #0
 8006c58:	2105      	movs	r1, #5
 8006c5a:	2014      	movs	r0, #20
 8006c5c:	f7f9 fdb7 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006c60:	2014      	movs	r0, #20
 8006c62:	f7f9 fdd0 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	40005c00 	.word	0x40005c00
 8006c74:	40021000 	.word	0x40021000

08006c78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f7fd fbac 	bl	80043ec <USBD_LL_SetupStage>
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	015b      	lsls	r3, r3, #5
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f7fd fbde 	bl	8004480 <USBD_LL_DataOutStage>
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	015b      	lsls	r3, r3, #5
 8006ce4:	4413      	add	r3, r2
 8006ce6:	333c      	adds	r3, #60	; 0x3c
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	4619      	mov	r1, r3
 8006cee:	f7fd fc22 	bl	8004536 <USBD_LL_DataInStage>
}
 8006cf2:	bf00      	nop
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fd fd05 	bl	8004718 <USBD_LL_SOF>
}
 8006d0e:	bf00      	nop
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d001      	beq.n	8006d2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006d2a:	f7ff fd39 	bl	80067a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006d34:	7bfa      	ldrb	r2, [r7, #15]
 8006d36:	4611      	mov	r1, r2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fd fcba 	bl	80046b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fd fc85 	bl	8004654 <USBD_LL_Reset>
}
 8006d4a:	bf00      	nop
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fd fcb4 	bl	80046d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d70:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <HAL_PCD_SuspendCallback+0x30>)
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	4a03      	ldr	r2, [pc, #12]	; (8006d84 <HAL_PCD_SuspendCallback+0x30>)
 8006d76:	f043 0306 	orr.w	r3, r3, #6
 8006d7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	e000ed00 	.word	0xe000ed00

08006d88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fd fcae 	bl	80046f8 <USBD_LL_Resume>
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006dac:	4a28      	ldr	r2, [pc, #160]	; (8006e50 <USBD_LL_Init+0xac>)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a26      	ldr	r2, [pc, #152]	; (8006e50 <USBD_LL_Init+0xac>)
 8006db8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8006dbc:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <USBD_LL_Init+0xac>)
 8006dbe:	4a25      	ldr	r2, [pc, #148]	; (8006e54 <USBD_LL_Init+0xb0>)
 8006dc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006dc2:	4b23      	ldr	r3, [pc, #140]	; (8006e50 <USBD_LL_Init+0xac>)
 8006dc4:	2208      	movs	r2, #8
 8006dc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006dc8:	4b21      	ldr	r3, [pc, #132]	; (8006e50 <USBD_LL_Init+0xac>)
 8006dca:	2202      	movs	r2, #2
 8006dcc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006dce:	4b20      	ldr	r3, [pc, #128]	; (8006e50 <USBD_LL_Init+0xac>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006dd4:	4b1e      	ldr	r3, [pc, #120]	; (8006e50 <USBD_LL_Init+0xac>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006dda:	4b1d      	ldr	r3, [pc, #116]	; (8006e50 <USBD_LL_Init+0xac>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006de0:	481b      	ldr	r0, [pc, #108]	; (8006e50 <USBD_LL_Init+0xac>)
 8006de2:	f7fa f801 	bl	8000de8 <HAL_PCD_Init>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006dec:	f7ff fcd8 	bl	80067a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006df6:	2318      	movs	r3, #24
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	f7fa ff08 	bl	8001c10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006e06:	2358      	movs	r3, #88	; 0x58
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2180      	movs	r1, #128	; 0x80
 8006e0c:	f7fa ff00 	bl	8001c10 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006e16:	23c0      	movs	r3, #192	; 0xc0
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2181      	movs	r1, #129	; 0x81
 8006e1c:	f7fa fef8 	bl	8001c10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006e26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	f7fa feef 	bl	8001c10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2182      	movs	r1, #130	; 0x82
 8006e40:	f7fa fee6 	bl	8001c10 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20001bec 	.word	0x20001bec
 8006e54:	40005c00 	.word	0x40005c00

08006e58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fa f894 	bl	8000f9c <HAL_PCD_Start>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f948 	bl	8007110 <USBD_Get_USB_Status>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	4608      	mov	r0, r1
 8006e98:	4611      	mov	r1, r2
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	70fb      	strb	r3, [r7, #3]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70bb      	strb	r3, [r7, #2]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006eb6:	78bb      	ldrb	r3, [r7, #2]
 8006eb8:	883a      	ldrh	r2, [r7, #0]
 8006eba:	78f9      	ldrb	r1, [r7, #3]
 8006ebc:	f7fa f9bb 	bl	8001236 <HAL_PCD_EP_Open>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f922 	bl	8007110 <USBD_Get_USB_Status>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fa f9f1 	bl	80012e0 <HAL_PCD_EP_Close>
 8006efe:	4603      	mov	r3, r0
 8006f00:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 f903 	bl	8007110 <USBD_Get_USB_Status>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006f32:	78fa      	ldrb	r2, [r7, #3]
 8006f34:	4611      	mov	r1, r2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fa faa4 	bl	8001484 <HAL_PCD_EP_SetStall>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 f8e4 	bl	8007110 <USBD_Get_USB_Status>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	4611      	mov	r1, r2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fa fada 	bl	800152e <HAL_PCD_EP_ClrStall>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f8c5 	bl	8007110 <USBD_Get_USB_Status>
 8006f86:	4603      	mov	r3, r0
 8006f88:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006fa6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	da08      	bge.n	8006fc2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	015b      	lsls	r3, r3, #5
 8006fba:	4413      	add	r3, r2
 8006fbc:	332a      	adds	r3, #42	; 0x2a
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	e008      	b.n	8006fd4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	015b      	lsls	r3, r3, #5
 8006fcc:	4413      	add	r3, r2
 8006fce:	f203 232a 	addw	r3, r3, #554	; 0x22a
 8006fd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr

08006fde <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006ff8:	78fa      	ldrb	r2, [r7, #3]
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fa f8f5 	bl	80011ec <HAL_PCD_SetAddress>
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	4618      	mov	r0, r3
 800700a:	f000 f881 	bl	8007110 <USBD_Get_USB_Status>
 800700e:	4603      	mov	r3, r0
 8007010:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007012:	7bbb      	ldrb	r3, [r7, #14]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	607a      	str	r2, [r7, #4]
 8007026:	461a      	mov	r2, r3
 8007028:	460b      	mov	r3, r1
 800702a:	72fb      	strb	r3, [r7, #11]
 800702c:	4613      	mov	r3, r2
 800702e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800703e:	893b      	ldrh	r3, [r7, #8]
 8007040:	7af9      	ldrb	r1, [r7, #11]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	f7fa f9e3 	bl	800140e <HAL_PCD_EP_Transmit>
 8007048:	4603      	mov	r3, r0
 800704a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 f85e 	bl	8007110 <USBD_Get_USB_Status>
 8007054:	4603      	mov	r3, r0
 8007056:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007058:	7dbb      	ldrb	r3, [r7, #22]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b086      	sub	sp, #24
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	461a      	mov	r2, r3
 800706e:	460b      	mov	r3, r1
 8007070:	72fb      	strb	r3, [r7, #11]
 8007072:	4613      	mov	r3, r2
 8007074:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007084:	893b      	ldrh	r3, [r7, #8]
 8007086:	7af9      	ldrb	r1, [r7, #11]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	f7fa f96f 	bl	800136c <HAL_PCD_EP_Receive>
 800708e:	4603      	mov	r3, r0
 8007090:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007092:	7dfb      	ldrb	r3, [r7, #23]
 8007094:	4618      	mov	r0, r3
 8007096:	f000 f83b 	bl	8007110 <USBD_Get_USB_Status>
 800709a:	4603      	mov	r3, r0
 800709c:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800709e:	7dbb      	ldrb	r3, [r7, #22]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fa f990 	bl	80013e4 <HAL_PCD_EP_GetRxCount>
 80070c4:	4603      	mov	r3, r0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <USBD_static_malloc+0x14>)
}
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr
 80070e4:	20000eec 	.word	0x20000eec

080070e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr

080070fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr

08007110 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d817      	bhi.n	8007154 <USBD_Get_USB_Status+0x44>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBD_Get_USB_Status+0x1c>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	0800713d 	.word	0x0800713d
 8007130:	08007143 	.word	0x08007143
 8007134:	08007149 	.word	0x08007149
 8007138:	0800714f 	.word	0x0800714f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	73fb      	strb	r3, [r7, #15]
    break;
 8007140:	e00b      	b.n	800715a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007142:	2302      	movs	r3, #2
 8007144:	73fb      	strb	r3, [r7, #15]
    break;
 8007146:	e008      	b.n	800715a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
    break;
 800714c:	e005      	b.n	800715a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800714e:	2302      	movs	r3, #2
 8007150:	73fb      	strb	r3, [r7, #15]
    break;
 8007152:	e002      	b.n	800715a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007154:	2302      	movs	r3, #2
 8007156:	73fb      	strb	r3, [r7, #15]
    break;
 8007158:	bf00      	nop
  }
  return usb_status;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop

08007168 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2212      	movs	r2, #18
 8007178:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800717a:	4b03      	ldr	r3, [pc, #12]	; (8007188 <USBD_FS_DeviceDescriptor+0x20>)
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	2000014c 	.word	0x2000014c

0800718c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2204      	movs	r2, #4
 800719c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800719e:	4b03      	ldr	r3, [pc, #12]	; (80071ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	20000160 	.word	0x20000160

080071b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	6039      	str	r1, [r7, #0]
 80071ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d105      	bne.n	80071ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	4907      	ldr	r1, [pc, #28]	; (80071e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80071c6:	4808      	ldr	r0, [pc, #32]	; (80071e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80071c8:	f7fd fec2 	bl	8004f50 <USBD_GetString>
 80071cc:	e004      	b.n	80071d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	4904      	ldr	r1, [pc, #16]	; (80071e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80071d2:	4805      	ldr	r0, [pc, #20]	; (80071e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80071d4:	f7fd febc 	bl	8004f50 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071d8:	4b02      	ldr	r3, [pc, #8]	; (80071e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	2000204c 	.word	0x2000204c
 80071e8:	0800747c 	.word	0x0800747c

080071ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	6039      	str	r1, [r7, #0]
 80071f6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	4904      	ldr	r1, [pc, #16]	; (800720c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071fc:	4804      	ldr	r0, [pc, #16]	; (8007210 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071fe:	f7fd fea7 	bl	8004f50 <USBD_GetString>
  return USBD_StrDesc;
 8007202:	4b02      	ldr	r3, [pc, #8]	; (800720c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	2000204c 	.word	0x2000204c
 8007210:	08007494 	.word	0x08007494

08007214 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	6039      	str	r1, [r7, #0]
 800721e:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	221a      	movs	r2, #26
 8007224:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007226:	f000 f843 	bl	80072b0 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800722a:	4b02      	ldr	r3, [pc, #8]	; (8007234 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000164 	.word	0x20000164

08007238 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d105      	bne.n	8007256 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	4907      	ldr	r1, [pc, #28]	; (800726c <USBD_FS_ConfigStrDescriptor+0x34>)
 800724e:	4808      	ldr	r0, [pc, #32]	; (8007270 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007250:	f7fd fe7e 	bl	8004f50 <USBD_GetString>
 8007254:	e004      	b.n	8007260 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	4904      	ldr	r1, [pc, #16]	; (800726c <USBD_FS_ConfigStrDescriptor+0x34>)
 800725a:	4805      	ldr	r0, [pc, #20]	; (8007270 <USBD_FS_ConfigStrDescriptor+0x38>)
 800725c:	f7fd fe78 	bl	8004f50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007260:	4b02      	ldr	r3, [pc, #8]	; (800726c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	2000204c 	.word	0x2000204c
 8007270:	080074a8 	.word	0x080074a8

08007274 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d105      	bne.n	8007292 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	4907      	ldr	r1, [pc, #28]	; (80072a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800728a:	4808      	ldr	r0, [pc, #32]	; (80072ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800728c:	f7fd fe60 	bl	8004f50 <USBD_GetString>
 8007290:	e004      	b.n	800729c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	4904      	ldr	r1, [pc, #16]	; (80072a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007296:	4805      	ldr	r0, [pc, #20]	; (80072ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007298:	f7fd fe5a 	bl	8004f50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	2000204c 	.word	0x2000204c
 80072ac:	080074b4 	.word	0x080074b4

080072b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80072b6:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <Get_SerialNum+0x44>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <Get_SerialNum+0x48>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072c2:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <Get_SerialNum+0x4c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d009      	beq.n	80072ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072d6:	2208      	movs	r2, #8
 80072d8:	4909      	ldr	r1, [pc, #36]	; (8007300 <Get_SerialNum+0x50>)
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f814 	bl	8007308 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072e0:	2204      	movs	r2, #4
 80072e2:	4908      	ldr	r1, [pc, #32]	; (8007304 <Get_SerialNum+0x54>)
 80072e4:	68b8      	ldr	r0, [r7, #8]
 80072e6:	f000 f80f 	bl	8007308 <IntToUnicode>
  }
}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	1ffff7e8 	.word	0x1ffff7e8
 80072f8:	1ffff7ec 	.word	0x1ffff7ec
 80072fc:	1ffff7f0 	.word	0x1ffff7f0
 8007300:	20000166 	.word	0x20000166
 8007304:	20000176 	.word	0x20000176

08007308 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800731a:	2300      	movs	r3, #0
 800731c:	75fb      	strb	r3, [r7, #23]
 800731e:	e027      	b.n	8007370 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	0f1b      	lsrs	r3, r3, #28
 8007324:	2b09      	cmp	r3, #9
 8007326:	d80b      	bhi.n	8007340 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	0f1b      	lsrs	r3, r3, #28
 800732c:	b2da      	uxtb	r2, r3
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4619      	mov	r1, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	440b      	add	r3, r1
 8007338:	3230      	adds	r2, #48	; 0x30
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	e00a      	b.n	8007356 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	0f1b      	lsrs	r3, r3, #28
 8007344:	b2da      	uxtb	r2, r3
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	4619      	mov	r1, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	440b      	add	r3, r1
 8007350:	3237      	adds	r2, #55	; 0x37
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	3301      	adds	r3, #1
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	4413      	add	r3, r2
 8007366:	2200      	movs	r2, #0
 8007368:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	3301      	adds	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]
 8007370:	7dfa      	ldrb	r2, [r7, #23]
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	429a      	cmp	r2, r3
 8007376:	d3d3      	bcc.n	8007320 <IntToUnicode+0x18>
  }
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr
	...

08007384 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007384:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007386:	e003      	b.n	8007390 <LoopCopyDataInit>

08007388 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007388:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800738a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800738c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800738e:	3104      	adds	r1, #4

08007390 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007390:	480a      	ldr	r0, [pc, #40]	; (80073bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007392:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007394:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007396:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007398:	d3f6      	bcc.n	8007388 <CopyDataInit>
  ldr r2, =_sbss
 800739a:	4a0a      	ldr	r2, [pc, #40]	; (80073c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800739c:	e002      	b.n	80073a4 <LoopFillZerobss>

0800739e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800739e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80073a0:	f842 3b04 	str.w	r3, [r2], #4

080073a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80073a4:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80073a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80073a8:	d3f9      	bcc.n	800739e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80073aa:	f7ff fb4d 	bl	8006a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80073ae:	f000 f80f 	bl	80073d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80073b2:	f7fe ffc7 	bl	8006344 <main>
  bx lr
 80073b6:	4770      	bx	lr
  ldr r3, =_sidata
 80073b8:	080074dc 	.word	0x080074dc
  ldr r0, =_sdata
 80073bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80073c0:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 80073c4:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 80073c8:	2000224c 	.word	0x2000224c

080073cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80073cc:	e7fe      	b.n	80073cc <ADC1_2_IRQHandler>
	...

080073d0 <__libc_init_array>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	2500      	movs	r5, #0
 80073d4:	4e0c      	ldr	r6, [pc, #48]	; (8007408 <__libc_init_array+0x38>)
 80073d6:	4c0d      	ldr	r4, [pc, #52]	; (800740c <__libc_init_array+0x3c>)
 80073d8:	1ba4      	subs	r4, r4, r6
 80073da:	10a4      	asrs	r4, r4, #2
 80073dc:	42a5      	cmp	r5, r4
 80073de:	d109      	bne.n	80073f4 <__libc_init_array+0x24>
 80073e0:	f000 f822 	bl	8007428 <_init>
 80073e4:	2500      	movs	r5, #0
 80073e6:	4e0a      	ldr	r6, [pc, #40]	; (8007410 <__libc_init_array+0x40>)
 80073e8:	4c0a      	ldr	r4, [pc, #40]	; (8007414 <__libc_init_array+0x44>)
 80073ea:	1ba4      	subs	r4, r4, r6
 80073ec:	10a4      	asrs	r4, r4, #2
 80073ee:	42a5      	cmp	r5, r4
 80073f0:	d105      	bne.n	80073fe <__libc_init_array+0x2e>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073f8:	4798      	blx	r3
 80073fa:	3501      	adds	r5, #1
 80073fc:	e7ee      	b.n	80073dc <__libc_init_array+0xc>
 80073fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007402:	4798      	blx	r3
 8007404:	3501      	adds	r5, #1
 8007406:	e7f2      	b.n	80073ee <__libc_init_array+0x1e>
 8007408:	080074d4 	.word	0x080074d4
 800740c:	080074d4 	.word	0x080074d4
 8007410:	080074d4 	.word	0x080074d4
 8007414:	080074d8 	.word	0x080074d8

08007418 <memset>:
 8007418:	4603      	mov	r3, r0
 800741a:	4402      	add	r2, r0
 800741c:	4293      	cmp	r3, r2
 800741e:	d100      	bne.n	8007422 <memset+0xa>
 8007420:	4770      	bx	lr
 8007422:	f803 1b01 	strb.w	r1, [r3], #1
 8007426:	e7f9      	b.n	800741c <memset+0x4>

08007428 <_init>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr

08007434 <_fini>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr
